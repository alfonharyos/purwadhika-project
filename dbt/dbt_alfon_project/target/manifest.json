{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.6", "generated_at": "2025-10-28T13:04:02.911878Z", "invocation_id": "3323ff04-09e1-4ce8-b2b8-0c2e32fe79db", "env": {}, "project_name": "dbt_alfon_project", "project_id": "b47700f0bd17863340d08034d80e4dca", "user_id": "9f6e7cec-ff51-44b9-a9e0-9df1b23f4a7f", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.dbt_alfon_project.mart_movie_popularity_monthly": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_mart", "name": "mart_movie_popularity_monthly", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/mart/mart_movie_popularity_monthly.sql", "original_file_path": "models/movie_streaming/mart/mart_movie_popularity_monthly.sql", "unique_id": "model.dbt_alfon_project.mart_movie_popularity_monthly", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "mart_movie_popularity_monthly"], "alias": "mart_movie_popularity_monthly", "checksum": {"name": "sha256", "checksum": "5df1661efe03daeb4e59ff5f98e3b44e72eb0d25ce1ecaecf6be47c741712d6c"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_mart", "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "movie_month_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "cluster_by": ["movie_id"], "partition_by": {"field": "month_key", "data_type": "date"}, "post-hook": [], "pre-hook": []}, "tags": ["mart"], "description": "Monthly aggregated movie popularity mart, incremental merge, full history", "columns": {"movie_id": {"name": "movie_id", "description": "Unique movie identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month_key": {"name": "month_key", "description": "Truncated date to month level (YYYY-MM-DD)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_watch_count": {"name": "total_watch_count", "description": "Total number of watch sessions for this movie in the month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unique_viewers": {"name": "unique_viewers", "description": "Number of unique users who watched the movie", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_watch_duration": {"name": "avg_watch_duration", "description": "Average watch duration per session in minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_watch_time": {"name": "total_watch_time", "description": "Total watch time in minutes for all sessions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "movie_month_key": {"name": "movie_month_key", "description": "Unique key per movie per month, format: movieid_YYYYMM", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/mart/mart_schema.yml", "build_path": "target/run/dbt_alfon_project/models/movie_streaming/mart/mart_movie_popularity_monthly.sql", "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_mart", "materialized": "incremental", "unique_key": "movie_month_key", "incremental_strategy": "merge", "partition_by": {"field": "month_key", "data_type": "date"}, "cluster_by": ["movie_id"], "tags": ["mart"]}, "created_at": 1761656593.0989134, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_mart`.`mart_movie_popularity_monthly`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='movie_month_key',\r\n    incremental_strategy='merge',\r\n    partition_by={'field': 'month_key', 'data_type': 'date'},\r\n    cluster_by=['movie_id'], \r\n    tags=['mart']\r\n) }}\r\n\r\nwith base as (\r\n    select\r\n        movie_id,\r\n        date_trunc(date_key, month) as month_key,\r\n        total_watch_count,\r\n        unique_viewers,\r\n        avg_watch_duration,\r\n        total_watch_time,\r\n        run_date_bq\r\n    from {{ source('jcdeol004_alfon_movie_streaming_model', 'fact_movie_popularity') }}\r\n    {% if is_incremental() %}\r\n        where date_trunc(date_key, month) >= date_sub(current_date, interval 2 month)\r\n    {% endif %}\r\n),\r\npopularity as (\r\n    select\r\n        movie_id,\r\n        month_key,\r\n        sum(total_watch_count) as total_watch_count,\r\n        sum(unique_viewers) as unique_viewers,\r\n        avg(avg_watch_duration) as avg_watch_duration,\r\n        sum(total_watch_time) as total_watch_time,\r\n        concat(cast(movie_id as string), '_', format_date('%Y%m', month_key)) as movie_month_key,\r\n        max(run_date_bq) as run_date_bq\r\n    from base\r\n    group by movie_id, month_key\r\n)\r\n\r\nselect\r\n    movie_id,\r\n    month_key,\r\n    total_watch_count,\r\n    unique_viewers,\r\n    avg_watch_duration,\r\n    total_watch_time,\r\n    movie_month_key,\r\n    run_date_bq\r\nfrom popularity", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_model", "fact_movie_popularity"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_movie_popularity"]}, "compiled_path": "target/compiled/dbt_alfon_project/models/movie_streaming/mart/mart_movie_popularity_monthly.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        movie_id,\n        date_trunc(date_key, month) as month_key,\n        total_watch_count,\n        unique_viewers,\n        avg_watch_duration,\n        total_watch_time,\n        run_date_bq\n    from `purwadika`.`jcdeol004_alfon_movie_streaming_model`.`fact_movie_popularity`\n    \n        where date_trunc(date_key, month) >= date_sub(current_date, interval 2 month)\n    \n),\npopularity as (\n    select\n        movie_id,\n        month_key,\n        sum(total_watch_count) as total_watch_count,\n        sum(unique_viewers) as unique_viewers,\n        avg(avg_watch_duration) as avg_watch_duration,\n        sum(total_watch_time) as total_watch_time,\n        concat(cast(movie_id as string), '_', format_date('%Y%m', month_key)) as movie_month_key,\n        max(run_date_bq) as run_date_bq\n    from base\n    group by movie_id, month_key\n)\n\nselect\n    movie_id,\n    month_key,\n    total_watch_count,\n    unique_viewers,\n    avg_watch_duration,\n    total_watch_time,\n    movie_month_key,\n    run_date_bq\nfrom popularity", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.mart_movie_rating_monthly": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_mart", "name": "mart_movie_rating_monthly", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/mart/mart_movie_rating_monthly.sql", "original_file_path": "models/movie_streaming/mart/mart_movie_rating_monthly.sql", "unique_id": "model.dbt_alfon_project.mart_movie_rating_monthly", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "mart_movie_rating_monthly"], "alias": "mart_movie_rating_monthly", "checksum": {"name": "sha256", "checksum": "cb88b7c6908ac0252479645840e07633e9fe5bad0a9c35f1039faddee69030e2"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_mart", "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "movie_month_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "cluster_by": ["movie_id"], "partition_by": {"field": "month_key", "data_type": "date"}, "post-hook": [], "pre-hook": []}, "tags": ["mart"], "description": "Monthly aggregated movie rating mart, incremental merge, full history", "columns": {"movie_id": {"name": "movie_id", "description": "Unique movie identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month_key": {"name": "month_key", "description": "Truncated date to month level (YYYY-MM-DD)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_rating": {"name": "avg_rating", "description": "Average rating score for the movie in the month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_ratings": {"name": "total_ratings", "description": "Total number of ratings submitted in the month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unique_raters": {"name": "unique_raters", "description": "Number of unique users who rated the movie", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "movie_month_key": {"name": "movie_month_key", "description": "Unique key per movie per month, format: movieid_YYYYMM", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/mart/mart_schema.yml", "build_path": "target/run/dbt_alfon_project/models/movie_streaming/mart/mart_movie_rating_monthly.sql", "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_mart", "materialized": "incremental", "unique_key": "movie_month_key", "incremental_strategy": "merge", "partition_by": {"field": "month_key", "data_type": "date"}, "cluster_by": ["movie_id"], "tags": ["mart"]}, "created_at": 1761656593.1007354, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_mart`.`mart_movie_rating_monthly`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='movie_month_key',\r\n    incremental_strategy='merge',\r\n    partition_by={'field': 'month_key', 'data_type': 'date'},\r\n    cluster_by=['movie_id'], \r\n    tags=['mart']\r\n) }}\r\n\r\nwith base as (\r\n    select\r\n        movie_id,\r\n        date_trunc(date_key, month) as month_key,\r\n        rating_score,\r\n        rating_id,\r\n        user_id,\r\n        run_date_bq\r\n    from {{ source('jcdeol004_alfon_movie_streaming_model', 'fact_ratings') }}\r\n    {% if is_incremental() %}\r\n        where date_trunc(date_key, month) >= date_sub(current_date, interval 2 month)\r\n    {% endif %}\r\n),\r\n\r\nrating as (\r\n    select\r\n        movie_id,\r\n        month_key,\r\n        avg(rating_score) as avg_rating,\r\n        count(rating_id) as total_ratings,\r\n        count(distinct user_id) as unique_raters,\r\n        concat(cast(movie_id as string), '_', format_date('%Y%m', month_key)) as movie_month_key,\r\n        max(run_date_bq) as run_date_bq\r\n    from base\r\n    group by movie_id, month_key\r\n)\r\n\r\nselect\r\n    movie_id,\r\n    month_key,\r\n    avg_rating,\r\n    total_ratings,\r\n    unique_raters,\r\n    movie_month_key,\r\n    run_date_bq\r\nfrom rating", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_model", "fact_ratings"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_ratings"]}, "compiled_path": "target/compiled/dbt_alfon_project/models/movie_streaming/mart/mart_movie_rating_monthly.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        movie_id,\n        date_trunc(date_key, month) as month_key,\n        rating_score,\n        rating_id,\n        user_id,\n        run_date_bq\n    from `purwadika`.`jcdeol004_alfon_movie_streaming_model`.`fact_ratings`\n    \n        where date_trunc(date_key, month) >= date_sub(current_date, interval 2 month)\n    \n),\n\nrating as (\n    select\n        movie_id,\n        month_key,\n        avg(rating_score) as avg_rating,\n        count(rating_id) as total_ratings,\n        count(distinct user_id) as unique_raters,\n        concat(cast(movie_id as string), '_', format_date('%Y%m', month_key)) as movie_month_key,\n        max(run_date_bq) as run_date_bq\n    from base\n    group by movie_id, month_key\n)\n\nselect\n    movie_id,\n    month_key,\n    avg_rating,\n    total_ratings,\n    unique_raters,\n    movie_month_key,\n    run_date_bq\nfrom rating", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.mart_subscription_revenue_monthly": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_mart", "name": "mart_subscription_revenue_monthly", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/mart/mart_subscription_revenue_monthly.sql", "original_file_path": "models/movie_streaming/mart/mart_subscription_revenue_monthly.sql", "unique_id": "model.dbt_alfon_project.mart_subscription_revenue_monthly", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "mart_subscription_revenue_monthly"], "alias": "mart_subscription_revenue_monthly", "checksum": {"name": "sha256", "checksum": "4a2f37085e82dd54fb3aeb624f05e7919821682436355df1cc2bd6f05617455b"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_mart", "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "subscription_month_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "cluster_by": ["subscription_id"], "partition_by": {"field": "month_key", "data_type": "date"}, "post-hook": [], "pre-hook": []}, "tags": ["mart"], "description": "Monthly aggregated subscription revenue mart, incremental merge, full history", "columns": {"subscription_id": {"name": "subscription_id", "description": "Unique subscription identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month_key": {"name": "month_key", "description": "Truncated date to month level (YYYY-MM-DD)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total amount collected for the subscription in the month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_payments": {"name": "total_payments", "description": "Total number of payments in the month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_completed": {"name": "status_completed", "description": "Number of payments with status 'completed'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_pending": {"name": "status_pending", "description": "Number of payments with status 'pending'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_failed": {"name": "status_failed", "description": "Number of payments with status 'failed'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_active_users": {"name": "total_active_users", "description": "Total active users in the month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_users": {"name": "new_users", "description": "Number of new users in the month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "churned_users": {"name": "churned_users", "description": "Number of users who canceled or stopped subscription in the month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_month_key": {"name": "subscription_month_key", "description": "Unique key per subscription per month, format: subscriptionid_YYYYMM", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_date_bq": {"name": "run_date_bq", "description": "Date when the data was loaded into BigQuery", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/mart/mart_schema.yml", "build_path": "target/run/dbt_alfon_project/models/movie_streaming/mart/mart_subscription_revenue_monthly.sql", "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_mart", "materialized": "incremental", "unique_key": "subscription_month_key", "incremental_strategy": "merge", "partition_by": {"field": "month_key", "data_type": "date"}, "cluster_by": ["subscription_id"], "tags": ["mart"]}, "created_at": 1761656593.1067019, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_mart`.`mart_subscription_revenue_monthly`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='subscription_month_key',\r\n    incremental_strategy='merge',\r\n    partition_by={'field': 'month_key', 'data_type': 'date'},\r\n    cluster_by=['subscription_id'],\r\n    tags=['mart']\r\n) }}\r\n\r\n-- Base payments per subscription\r\nwith base as (\r\n    select\r\n        subscription_id,\r\n        date_trunc(date(payment_date), month) as month_key,\r\n        amount,\r\n        payment_id,\r\n        status,\r\n        run_date_bq\r\n    from {{ source('jcdeol004_alfon_movie_streaming_model', 'fact_payments') }}\r\n    {% if is_incremental() %}\r\n        where date_trunc(date(payment_date), month) >= date_sub(current_date, interval 2 month)\r\n    {% endif %}\r\n),\r\n\r\n-- Aggregate monthly revenue\r\nrevenue as (\r\n    select\r\n        subscription_id,\r\n        month_key,\r\n        sum(amount) as total_amount,\r\n        count(payment_id) as total_payments,\r\n        sum(case when status='completed' then 1 else 0 end) as status_completed,\r\n        sum(case when status='pending' then 1 else 0 end) as status_pending,\r\n        sum(case when status='failed' then 1 else 0 end) as status_failed,\r\n        concat(cast(subscription_id as string), '_', format_date('%Y%m', month_key)) as subscription_month_key,\r\n        max(run_date_bq) as run_date_bq\r\n    from base\r\n    group by subscription_id, month_key\r\n),\r\n\r\n-- Calculate active, new, and churned users per month\r\nuser_activity as (\r\n    select\r\n        month_key,\r\n        count(distinct subscription_id) as total_active_users,\r\n        count(distinct case when first_payment_date = month_key then subscription_id end) as new_users,\r\n        count(distinct case when last_payment_date < month_key then subscription_id end) as churned_users\r\n    from (\r\n        select\r\n            subscription_id,\r\n            month_key,\r\n            min(month_key) over (partition by subscription_id) as first_payment_date,\r\n            max(month_key) over (partition by subscription_id) as last_payment_date\r\n        from revenue\r\n    )\r\n    group by month_key\r\n)\r\n\r\nselect\r\n    r.subscription_id,\r\n    r.month_key,\r\n    r.total_amount,\r\n    r.total_payments,\r\n    r.status_completed,\r\n    r.status_pending,\r\n    r.status_failed,\r\n    r.subscription_month_key,\r\n    r.run_date_bq,\r\n    ua.total_active_users,\r\n    ua.new_users,\r\n    ua.churned_users\r\nfrom revenue r\r\nleft join user_activity ua\r\n    on r.month_key = ua.month_key", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_model", "fact_payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_payments"]}, "compiled_path": "target/compiled/dbt_alfon_project/models/movie_streaming/mart/mart_subscription_revenue_monthly.sql", "compiled": true, "compiled_code": "\n\n-- Base payments per subscription\nwith base as (\n    select\n        subscription_id,\n        date_trunc(date(payment_date), month) as month_key,\n        amount,\n        payment_id,\n        status,\n        run_date_bq\n    from `purwadika`.`jcdeol004_alfon_movie_streaming_model`.`fact_payments`\n    \n        where date_trunc(date(payment_date), month) >= date_sub(current_date, interval 2 month)\n    \n),\n\n-- Aggregate monthly revenue\nrevenue as (\n    select\n        subscription_id,\n        month_key,\n        sum(amount) as total_amount,\n        count(payment_id) as total_payments,\n        sum(case when status='completed' then 1 else 0 end) as status_completed,\n        sum(case when status='pending' then 1 else 0 end) as status_pending,\n        sum(case when status='failed' then 1 else 0 end) as status_failed,\n        concat(cast(subscription_id as string), '_', format_date('%Y%m', month_key)) as subscription_month_key,\n        max(run_date_bq) as run_date_bq\n    from base\n    group by subscription_id, month_key\n),\n\n-- Calculate active, new, and churned users per month\nuser_activity as (\n    select\n        month_key,\n        count(distinct subscription_id) as total_active_users,\n        count(distinct case when first_payment_date = month_key then subscription_id end) as new_users,\n        count(distinct case when last_payment_date < month_key then subscription_id end) as churned_users\n    from (\n        select\n            subscription_id,\n            month_key,\n            min(month_key) over (partition by subscription_id) as first_payment_date,\n            max(month_key) over (partition by subscription_id) as last_payment_date\n        from revenue\n    )\n    group by month_key\n)\n\nselect\n    r.subscription_id,\n    r.month_key,\n    r.total_amount,\n    r.total_payments,\n    r.status_completed,\n    r.status_pending,\n    r.status_failed,\n    r.subscription_month_key,\n    r.run_date_bq,\n    ua.total_active_users,\n    ua.new_users,\n    ua.churned_users\nfrom revenue r\nleft join user_activity ua\n    on r.month_key = ua.month_key", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.mart_user_activity_monthly": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_mart", "name": "mart_user_activity_monthly", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/mart/mart_user_activity_monthly.sql", "original_file_path": "models/movie_streaming/mart/mart_user_activity_monthly.sql", "unique_id": "model.dbt_alfon_project.mart_user_activity_monthly", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "mart_user_activity_monthly"], "alias": "mart_user_activity_monthly", "checksum": {"name": "sha256", "checksum": "869da4e751b017b560fce913023c9189789a53a02d972b1f649e2975b2f61a94"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_mart", "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "user_month_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "cluster_by": ["user_id"], "partition_by": {"field": "month_key", "data_type": "date"}, "post-hook": [], "pre-hook": []}, "tags": ["mart"], "description": "Monthly aggregated user activity mart, incremental merge, full history", "columns": {"user_id": {"name": "user_id", "description": "Unique user identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month_key": {"name": "month_key", "description": "Truncated date to month level (YYYY-MM-DD)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_watch_time_minutes": {"name": "total_watch_time_minutes", "description": "Total watch duration for the user in minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_sessions": {"name": "total_sessions", "description": "Total watch sessions for the user in the month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_watch_duration": {"name": "avg_watch_duration", "description": "Average watch duration per session for the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "completed_sessions": {"name": "completed_sessions", "description": "Number of sessions that reached completion criteria", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_month_key": {"name": "user_month_key", "description": "Unique key per user per month, format: userid_YYYYMM", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/mart/mart_schema.yml", "build_path": "target/run/dbt_alfon_project/models/movie_streaming/mart/mart_user_activity_monthly.sql", "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_mart", "materialized": "incremental", "unique_key": "user_month_key", "incremental_strategy": "merge", "partition_by": {"field": "month_key", "data_type": "date"}, "cluster_by": ["user_id"], "tags": ["mart"]}, "created_at": 1761656593.1033313, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_mart`.`mart_user_activity_monthly`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='user_month_key',\r\n    incremental_strategy='merge',\r\n    partition_by={'field': 'month_key', 'data_type': 'date'},\r\n    cluster_by=['user_id'], \r\n    tags=['mart']\r\n) }}\r\n\r\nwith base as (\r\n    select\r\n        user_id,\r\n        date_trunc(date_key, month) as month_key,\r\n        watch_duration_minutes,\r\n        session_id,\r\n        completed_flag,\r\n        run_date_bq\r\n    from {{ source('jcdeol004_alfon_movie_streaming_model', 'fact_user_activity') }}\r\n    {% if is_incremental() %}\r\n        where date_trunc(date_key, month) >= date_sub(current_date, interval 2 month)\r\n    {% endif %}\r\n),\r\n\r\nactivity as (\r\n    select\r\n        user_id,\r\n        month_key,\r\n        sum(watch_duration_minutes) as total_watch_time_minutes,\r\n        count(session_id) as total_sessions,\r\n        avg(watch_duration_minutes) as avg_watch_duration,\r\n        sum(case when completed_flag then 1 else 0 end) as completed_sessions,\r\n        concat(cast(user_id as string), '_', format_date('%Y%m', month_key)) as user_month_key,\r\n        max(run_date_bq) as run_date_bq\r\n    from base\r\n    group by user_id, month_key\r\n)\r\n\r\nselect\r\n    user_id,\r\n    month_key,\r\n    total_watch_time_minutes,\r\n    total_sessions,\r\n    avg_watch_duration,\r\n    completed_sessions,\r\n    user_month_key,\r\n    run_date_bq\r\nfrom activity", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_model", "fact_user_activity"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_user_activity"]}, "compiled_path": "target/compiled/dbt_alfon_project/models/movie_streaming/mart/mart_user_activity_monthly.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        user_id,\n        date_trunc(date_key, month) as month_key,\n        watch_duration_minutes,\n        session_id,\n        completed_flag,\n        run_date_bq\n    from `purwadika`.`jcdeol004_alfon_movie_streaming_model`.`fact_user_activity`\n    \n        where date_trunc(date_key, month) >= date_sub(current_date, interval 2 month)\n    \n),\n\nactivity as (\n    select\n        user_id,\n        month_key,\n        sum(watch_duration_minutes) as total_watch_time_minutes,\n        count(session_id) as total_sessions,\n        avg(watch_duration_minutes) as avg_watch_duration,\n        sum(case when completed_flag then 1 else 0 end) as completed_sessions,\n        concat(cast(user_id as string), '_', format_date('%Y%m', month_key)) as user_month_key,\n        max(run_date_bq) as run_date_bq\n    from base\n    group by user_id, month_key\n)\n\nselect\n    user_id,\n    month_key,\n    total_watch_time_minutes,\n    total_sessions,\n    avg_watch_duration,\n    completed_sessions,\n    user_month_key,\n    run_date_bq\nfrom activity", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.dim_date": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_model", "name": "dim_date", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/model/dim_date.sql", "original_file_path": "models/movie_streaming/model/dim_date.sql", "unique_id": "model.dbt_alfon_project.dim_date", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "dim_date"], "alias": "dim_date", "checksum": {"name": "sha256", "checksum": "829a6f1bdeb7229a237a2005a453efd16ce63a63437d3db651e597981b8c6630"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_model", "database": null, "tags": ["model"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["model"], "description": "Date dimension", "columns": {"date_key": {"name": "date_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day_of_week": {"name": "day_of_week", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_weekend": {"name": "is_weekend", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quarter": {"name": "quarter", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/model/model_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_model", "materialized": "table", "tags": ["model"]}, "created_at": 1761656593.17226, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_model`.`dim_date`", "raw_code": "{{ config(\r\n    materialized='table', \r\n    tags=['model']\r\n) }}\r\n\r\nwith calendar as (\r\n    select\r\n        date_add('1970-01-01', interval seq day) as date\r\n    from unnest(generate_array(0, 365*10)) as seq\r\n)\r\nselect\r\n    date as date_key,\r\n    date as full_date,\r\n    extract(dayofweek from date) as day_of_week,\r\n    case when extract(dayofweek from date) in (1,7) then true else false end as is_weekend,\r\n    extract(month from date) as month,\r\n    format_date('%b', date) as month_name,\r\n    extract(quarter from date) as quarter,\r\n    extract(year from date) as year\r\nfrom calendar", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.dim_movies": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_model", "name": "dim_movies", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/model/dim_movies.sql", "original_file_path": "models/movie_streaming/model/dim_movies.sql", "unique_id": "model.dbt_alfon_project.dim_movies", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "dim_movies"], "alias": "dim_movies", "checksum": {"name": "sha256", "checksum": "8985b1e962ffd1d7216dffb70bbf0ba8f7b63cc2f61dcf397cf763bfba59c5e6"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_model", "database": null, "tags": ["model"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["model"], "description": "Dimension movie", "columns": {"movie_id": {"name": "movie_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "genre": {"name": "genre", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "release_year": {"name": "release_year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "language": {"name": "language", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/model/model_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_model", "materialized": "table", "tags": ["model"]}, "created_at": 1761656593.170109, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_model`.`dim_movies`", "raw_code": "{{ config(\r\n    materialized='table', \r\n    tags=['model']\r\n) }}\r\n\r\nselect\r\n    movie_id,\r\n    title,\r\n    genre,\r\n    release_year,\r\n    duration_min,\r\n    language,\r\n    run_date_bq\r\nfrom {{ source('jcdeol004_alfon_movie_streaming_preparation', 'prep_movies') }}", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_preparation", "prep_movies"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_movies"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.dim_subscriptions": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_model", "name": "dim_subscriptions", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/model/dim_subscriptions.sql", "original_file_path": "models/movie_streaming/model/dim_subscriptions.sql", "unique_id": "model.dbt_alfon_project.dim_subscriptions", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "dim_subscriptions"], "alias": "dim_subscriptions", "checksum": {"name": "sha256", "checksum": "abf62d012218813fe438aa4d26ee889e4d89b1ca838582638cb1d764083ecf80"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_model", "database": null, "tags": ["model"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["model"], "description": "Dimension subscription plan", "columns": {"subscription_id": {"name": "subscription_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_type": {"name": "plan_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/model/model_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_model", "materialized": "table", "tags": ["model"]}, "created_at": 1761656593.1686103, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_model`.`dim_subscriptions`", "raw_code": "{{ config(\r\n    materialized='table', \r\n    tags=['model']\r\n) }}\r\n\r\nselect\r\n    subscription_id,\r\n    user_id,\r\n    plan_type,\r\n    start_date,\r\n    end_date,\r\n    price,\r\n    status,\r\n    run_date_bq\r\nfrom {{ source('jcdeol004_alfon_movie_streaming_preparation', 'prep_subscriptions') }}", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_preparation", "prep_subscriptions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_subscriptions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.dim_users": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_model", "name": "dim_users", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/model/dim_users.sql", "original_file_path": "models/movie_streaming/model/dim_users.sql", "unique_id": "model.dbt_alfon_project.dim_users", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "dim_users"], "alias": "dim_users", "checksum": {"name": "sha256", "checksum": "e6fa0e8985487fcdea2c3440d440829ceed8f3552d3c9a001d1c2862816eb05f"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_model", "database": null, "tags": ["model"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["model"], "description": "Dimension user", "columns": {"user_id": {"name": "user_id", "description": "Primary key user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "FK to subscription", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "join_date": {"name": "join_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/model/model_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_model", "materialized": "table", "tags": ["model"]}, "created_at": 1761656593.1669595, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_model`.`dim_users`", "raw_code": "{{ config(\r\n    materialized='table', \r\n    tags=['model']\r\n) }}\r\n\r\nwith users as (\r\n    select\r\n        user_id,\r\n        name,\r\n        email,\r\n        country,\r\n        city,\r\n        join_date,\r\n        subscription_status,\r\n        run_date_bq\r\n    from {{ source('jcdeol004_alfon_movie_streaming_preparation', 'prep_users') }}\r\n),\r\nsubscriptions as (\r\n    select \r\n        user_id, \r\n        subscription_id\r\n    from {{ source('jcdeol004_alfon_movie_streaming_preparation', 'prep_subscriptions') }}\r\n)\r\n\r\nselect\r\n    u.user_id,\r\n    u.name,\r\n    u.email,\r\n    u.country,\r\n    u.city,\r\n    s.subscription_id,\r\n    u.join_date,\r\n    u.subscription_status,\r\n    u.run_date_bq\r\nfrom users u\r\nleft join subscriptions s\r\non u.user_id = s.user_id", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_preparation", "prep_subscriptions"], ["jcdeol004_alfon_movie_streaming_preparation", "prep_users"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_subscriptions", "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.fact_movie_popularity": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_model", "name": "fact_movie_popularity", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/model/fact_movie_popularity.sql", "original_file_path": "models/movie_streaming/model/fact_movie_popularity.sql", "unique_id": "model.dbt_alfon_project.fact_movie_popularity", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "fact_movie_popularity"], "alias": "fact_movie_popularity", "checksum": {"name": "sha256", "checksum": "f5242552e62bf05fdaf268ecd0f74896141300774edd40a828dfc6f977287920"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_model", "database": null, "tags": ["model"], "meta": {"partition_by": "date_key", "cluster_by": ["movie_id"]}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "movie_id_date", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["model"], "description": "Aggregated movie popularity fact", "columns": {"movie_id": {"name": "movie_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_key": {"name": "date_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_watch_count": {"name": "total_watch_count", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unique_viewers": {"name": "unique_viewers", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_watch_duration": {"name": "avg_watch_duration", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_watch_time": {"name": "total_watch_time", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"partition_by": "date_key", "cluster_by": ["movie_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/model/model_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_model", "materialized": "incremental", "meta": {"partition_by": "date_key", "cluster_by": ["movie_id"]}, "unique_key": "movie_id_date", "incremental_strategy": "merge", "tags": ["model"]}, "created_at": 1761656593.177022, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_model`.`fact_movie_popularity`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='movie_id_date',\r\n    incremental_strategy='merge', \r\n    tags=['model']\r\n) }}\r\n\r\nwith base as (\r\n    select\r\n        movie_id,\r\n        date(start_time) as date_key,\r\n        session_id,\r\n        user_id,\r\n        TIMESTAMP_DIFF(end_time, start_time, MINUTE) as watch_duration_minutes,\r\n        run_date_bq\r\n    from {{ ref('fact_user_activity') }}\r\n    {% if is_incremental() %}\r\n        where date(start_time) > (select max(date_key) from {{ this }})\r\n    {% endif %}\r\n)\r\n\r\nselect\r\n    movie_id,\r\n    date_key,\r\n    count(distinct session_id) as total_watch_count,\r\n    count(distinct user_id) as unique_viewers,\r\n    avg(watch_duration_minutes) as avg_watch_duration,\r\n    sum(watch_duration_minutes) as total_watch_time,\r\n    concat(cast(movie_id as string), '_', format_date('%Y%m%d', date_key)) as movie_id_date,\r\n    max(run_date_bq) as run_date_bq\r\nfrom base\r\ngroup by movie_id, date_key", "language": "sql", "refs": [{"name": "fact_user_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_alfon_project.fact_user_activity"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.fact_payments": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_model", "name": "fact_payments", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/model/fact_payments.sql", "original_file_path": "models/movie_streaming/model/fact_payments.sql", "unique_id": "model.dbt_alfon_project.fact_payments", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "fact_payments"], "alias": "fact_payments", "checksum": {"name": "sha256", "checksum": "5770c0c707f8b4bab311110e4d3b312db77d79c86db91ebf043730d0fbfba420"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_model", "database": null, "tags": ["model"], "meta": {"partition_by": "date_key", "cluster_by": ["user_id", "subscription_id"]}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "payment_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["model"], "description": "Fact table for user payments", "columns": {"payment_id": {"name": "payment_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_date": {"name": "payment_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_key": {"name": "date_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"partition_by": "date_key", "cluster_by": ["user_id", "subscription_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/model/model_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_model", "materialized": "incremental", "meta": {"partition_by": "date_key", "cluster_by": ["user_id", "subscription_id"]}, "unique_key": "payment_id", "incremental_strategy": "merge", "tags": ["model"]}, "created_at": 1761656593.181726, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_model`.`fact_payments`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='payment_id',\r\n    incremental_strategy='merge',\r\n    tags=['model']\r\n) }}\r\n\r\nwith base as (\r\n    select\r\n        payment_id,\r\n        user_id,\r\n        subscription_id,\r\n        amount,\r\n        payment_date,\r\n        method,\r\n        status,\r\n        date(payment_date) as date_key,\r\n        run_date_bq,\r\n        created_at,\r\n        row_number() over (partition by payment_id order by created_at desc) as rn\r\n    from {{ source('jcdeol004_alfon_movie_streaming_preparation', 'prep_payments') }}\r\n    {% if is_incremental() %}\r\n        where date(payment_date) > (select max(date_key) from {{ this }})\r\n    {% endif %}\r\n)\r\n\r\nselect\r\n    payment_id,\r\n    user_id,\r\n    subscription_id,\r\n    amount,\r\n    payment_date,\r\n    method,\r\n    status,\r\n    date_key,\r\n    run_date_bq\r\nfrom base\r\nwhere rn = 1", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_preparation", "prep_payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.fact_ratings": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_model", "name": "fact_ratings", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/model/fact_ratings.sql", "original_file_path": "models/movie_streaming/model/fact_ratings.sql", "unique_id": "model.dbt_alfon_project.fact_ratings", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "fact_ratings"], "alias": "fact_ratings", "checksum": {"name": "sha256", "checksum": "c3a0b0eb547ecdfc6d275d54730ae104f69f7bcdb2f30718f7564eb23bcb6f85"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_model", "database": null, "tags": ["model"], "meta": {"partition_by": "date_key", "cluster_by": ["movie_id", "user_id"]}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "rating_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["model"], "description": "Fact table for user ratings", "columns": {"rating_id": {"name": "rating_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "movie_id": {"name": "movie_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rating_score": {"name": "rating_score", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rating_date": {"name": "rating_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_key": {"name": "date_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"partition_by": "date_key", "cluster_by": ["movie_id", "user_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/model/model_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_model", "materialized": "incremental", "meta": {"partition_by": "date_key", "cluster_by": ["movie_id", "user_id"]}, "unique_key": "rating_id", "incremental_strategy": "merge", "tags": ["model"]}, "created_at": 1761656593.1843927, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_model`.`fact_ratings`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='rating_id',\r\n    incremental_strategy='merge',\r\n    tags=['model']\r\n) }}\r\n\r\nwith base as (\r\n    select\r\n        rating_id,\r\n        user_id,\r\n        movie_id,\r\n        rating_score,\r\n        rating_date,\r\n        review_text,\r\n        date(rating_date) as date_key,\r\n        run_date_bq,\r\n        created_at,\r\n        row_number() over (partition by rating_id order by created_at desc) as rn\r\n    from {{ source('jcdeol004_alfon_movie_streaming_preparation', 'prep_ratings') }}\r\n    {% if is_incremental() %}\r\n      where date(rating_date) > (select max(date_key) from {{ this }})\r\n    {% endif %}\r\n)\r\n\r\nselect\r\n    rating_id,\r\n    user_id,\r\n    movie_id,\r\n    rating_score,\r\n    rating_date,\r\n    review_text,\r\n    date_key,\r\n    run_date_bq\r\nfrom base\r\nwhere rn = 1", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_preparation", "prep_ratings"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.fact_user_activity": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_model", "name": "fact_user_activity", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/model/fact_user_activity.sql", "original_file_path": "models/movie_streaming/model/fact_user_activity.sql", "unique_id": "model.dbt_alfon_project.fact_user_activity", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "fact_user_activity"], "alias": "fact_user_activity", "checksum": {"name": "sha256", "checksum": "d8132e5d387538d4a318638ba3f7a57fe179d3e8a095a92c28e2855f60524a24"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_model", "database": null, "tags": ["model"], "meta": {"partition_by": "date_key", "cluster_by": ["user_id", "movie_id"]}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "session_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["model"], "description": "Fact table for user watch sessions", "columns": {"session_id": {"name": "session_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "movie_id": {"name": "movie_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_key": {"name": "date_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "watch_duration_minutes": {"name": "watch_duration_minutes", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "completed_flag": {"name": "completed_flag", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"partition_by": "date_key", "cluster_by": ["user_id", "movie_id"]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/model/model_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_model", "materialized": "incremental", "meta": {"partition_by": "date_key", "cluster_by": ["user_id", "movie_id"]}, "unique_key": "session_id", "incremental_strategy": "merge", "tags": ["model"]}, "created_at": 1761656593.1748214, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_model`.`fact_user_activity`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='session_id',\r\n    incremental_strategy='merge', \r\n    tags=['model']\r\n) }}\r\n\r\n\r\nwith base as (\r\n    select\r\n        session_id,\r\n        user_id,\r\n        movie_id,\r\n        start_time,\r\n        end_time,\r\n        TIMESTAMP_DIFF(end_time, start_time, MINUTE) as watch_duration_minutes,\r\n        case \r\n            when completion_rate >= 0.85 then true\r\n            else false\r\n        end as completed_flag,\r\n        device_type,\r\n        date(start_time) as date_key,\r\n        run_date_bq,\r\n        row_number() over (partition by session_id order by created_at desc) as rn\r\n    from {{ source('jcdeol004_alfon_movie_streaming_preparation', 'prep_watch_sessions') }}\r\n    {% if is_incremental() %}\r\n        where date(start_time) > (select max(date_key) from {{ this }})\r\n    {% endif %}\r\n)\r\n\r\nselect\r\n    session_id,\r\n    user_id,\r\n    movie_id,\r\n    start_time,\r\n    end_time,\r\n    watch_duration_minutes,\r\n    completed_flag,\r\n    device_type,\r\n    date_key,\r\n    run_date_bq\r\nfrom base\r\nwhere rn = 1", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_preparation", "prep_watch_sessions"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_watch_sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.prep_movies": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_preparation", "name": "prep_movies", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/preparation/prep_movies.sql", "original_file_path": "models/movie_streaming/preparation/prep_movies.sql", "unique_id": "model.dbt_alfon_project.prep_movies", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "prep_movies"], "alias": "prep_movies", "checksum": {"name": "sha256", "checksum": "dd6fbe339ddfbf99480e7db30ac0877f7c53f71ebd99abe8fd988f1915aa66f3"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_preparation", "database": null, "tags": ["preparation"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["preparation"], "description": "Prepared movies table with metadata", "columns": {"movie_id": {"name": "movie_id", "description": "Unique movie identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "Movie title", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "release_year": {"name": "release_year", "description": "Release year of the movie", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/preparation/prep_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_preparation", "materialized": "table", "tags": ["preparation"]}, "created_at": 1761656593.2559874, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_preparation`.`prep_movies`", "raw_code": "{{ config(\r\n    materialized='table', \r\n    tags=['preparation']\r\n) }}\r\n\r\nselect\r\n    movie_id,\r\n    initcap(trim(title)) as title,\r\n    initcap(trim(genre)) as genre,\r\n    release_year,\r\n    duration_min,\r\n    initcap(language) as language,\r\n    created_at,\r\n    run_date_bq\r\nfrom {{ source('jcdeol004_alfon_movie_streaming_raw', 'raw_movies') }}\r\n\r\nqualify row_number() over (partition by movie_id order by created_at desc) = 1", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_raw", "raw_movies"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_movies"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.prep_payments": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_preparation", "name": "prep_payments", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/preparation/prep_payments.sql", "original_file_path": "models/movie_streaming/preparation/prep_payments.sql", "unique_id": "model.dbt_alfon_project.prep_payments", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "prep_payments"], "alias": "prep_payments", "checksum": {"name": "sha256", "checksum": "246ecd1a55d4743f720a07f00fef14d178c65fd3b878ee36b3f54f686bc4d86a"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_preparation", "database": null, "tags": ["preparation"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "payment_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["preparation"], "description": "Prepared payments table for subscription transactions", "columns": {"payment_id": {"name": "payment_id", "description": "Unique payment identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "FK to prep_users", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "FK to prep_subscriptions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Payment amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/preparation/prep_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_preparation", "materialized": "incremental", "unique_key": "payment_id", "incremental_strategy": "merge", "tags": ["preparation"]}, "created_at": 1761656593.257319, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_preparation`.`prep_payments`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='payment_id',\r\n    incremental_strategy='merge', \r\n    tags=['preparation']\r\n) }}\r\n\r\nwith base as (\r\n    select\r\n        payment_id,\r\n        user_id,\r\n        subscription_id,\r\n        amount,\r\n        payment_date,\r\n        method,\r\n        status,\r\n        created_at,\r\n        run_date_bq\r\n    from {{ source('jcdeol004_alfon_movie_streaming_raw', 'raw_payments') }}\r\n    {% if is_incremental() %}\r\n        where run_date_bq > (select max(run_date_bq) from {{ this }})\r\n    {% endif %}\r\n)\r\n\r\nselect\r\n    payment_id,\r\n    user_id,\r\n    subscription_id,\r\n    amount,\r\n    payment_date,\r\n    method,\r\n    status,\r\n    created_at,\r\n    run_date_bq\r\nfrom base\r\nqualify row_number() over (partition by payment_id order by created_at desc) = 1", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_raw", "raw_payments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.prep_ratings": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_preparation", "name": "prep_ratings", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/preparation/prep_ratings.sql", "original_file_path": "models/movie_streaming/preparation/prep_ratings.sql", "unique_id": "model.dbt_alfon_project.prep_ratings", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "prep_ratings"], "alias": "prep_ratings", "checksum": {"name": "sha256", "checksum": "876257895a447667aa7e3fd7f828c0571d36c2aadc9b283ba6698ae5fd9b89fb"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_preparation", "database": null, "tags": ["preparation"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "rating_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["preparation"], "description": "Prepared ratings table with user reviews", "columns": {"rating_id": {"name": "rating_id", "description": "Unique identifier for rating", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "FK to prep_users", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "movie_id": {"name": "movie_id", "description": "FK to prep_movies", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rating_score": {"name": "rating_score", "description": "Rating score between 1 and 5", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/preparation/prep_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_preparation", "materialized": "incremental", "unique_key": "rating_id", "incremental_strategy": "merge", "tags": ["preparation"]}, "created_at": 1761656593.2576654, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_preparation`.`prep_ratings`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='rating_id',\r\n    incremental_strategy='merge', \r\n    tags=['preparation']\r\n) }}\r\n\r\n\r\nwith base as (\r\n    select\r\n        rating_id,\r\n        user_id,\r\n        movie_id,\r\n        rating_score,\r\n        rating_date,\r\n        review_text,\r\n        created_at,\r\n        run_date_bq\r\n    from {{ source('jcdeol004_alfon_movie_streaming_raw', 'raw_ratings') }}\r\n    {% if is_incremental() %}\r\n        where run_date_bq > (select max(run_date_bq) from {{ this }})\r\n    {% endif %}\r\n)\r\n\r\nselect\r\n    rating_id,\r\n    user_id,\r\n    movie_id,\r\n    rating_score,\r\n    rating_date,\r\n    review_text,\r\n    created_at,\r\n    run_date_bq\r\nfrom base\r\nqualify row_number() over (partition by rating_id order by created_at desc) = 1", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_raw", "raw_ratings"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.prep_subscriptions": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_preparation", "name": "prep_subscriptions", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/preparation/prep_subscriptions.sql", "original_file_path": "models/movie_streaming/preparation/prep_subscriptions.sql", "unique_id": "model.dbt_alfon_project.prep_subscriptions", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "prep_subscriptions"], "alias": "prep_subscriptions", "checksum": {"name": "sha256", "checksum": "fcb258f7558e07fc13da636f5eca413ce9fcc72e5495e87d6bb4e86042063b49"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_preparation", "database": null, "tags": ["preparation"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "subscription_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["preparation"], "description": "Prepared subscriptions table with plan details", "columns": {"subscription_id": {"name": "subscription_id", "description": "Unique subscription identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "FK to prep_users", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_type": {"name": "plan_type", "description": "Subscription plan: Basic, Standard, Premium", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/preparation/prep_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_preparation", "materialized": "incremental", "unique_key": "subscription_id", "incremental_strategy": "merge", "tags": ["preparation"]}, "created_at": 1761656593.2556658, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_preparation`.`prep_subscriptions`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='subscription_id',\r\n    incremental_strategy='merge', \r\n    tags=['preparation']\r\n) }}\r\n\r\nwith base as (\r\n    select\r\n        subscription_id,\r\n        user_id,\r\n        plan_type,\r\n        start_date,\r\n        end_date,\r\n        price,\r\n        status,\r\n        created_at,\r\n        run_date_bq\r\n    from {{ source('jcdeol004_alfon_movie_streaming_raw', 'raw_subscriptions') }}\r\n    {% if is_incremental() %}\r\n        where run_date_bq > (select max(run_date_bq) from {{ this }})\r\n    {% endif %}\r\n)\r\n\r\nselect\r\n    subscription_id,\r\n    user_id,\r\n    plan_type,\r\n    start_date,\r\n    end_date,\r\n    price,\r\n    status,\r\n    created_at,\r\n    run_date_bq\r\nfrom base\r\nqualify row_number() over (partition by subscription_id order by created_at desc) = 1", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_raw", "raw_subscriptions"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_subscriptions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.prep_users": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_preparation", "name": "prep_users", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/preparation/prep_users.sql", "original_file_path": "models/movie_streaming/preparation/prep_users.sql", "unique_id": "model.dbt_alfon_project.prep_users", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "prep_users"], "alias": "prep_users", "checksum": {"name": "sha256", "checksum": "fa1e0d0a61c83fd9d59f079bf84fbc9efca8d19974cd6ddea1f2f68204fab385"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_preparation", "database": null, "tags": ["preparation"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["preparation"], "description": "Prepared users table with basic user info and subscription status", "columns": {"user_id": {"name": "user_id", "description": "Unique identifier for user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "Unique email of the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_status": {"name": "subscription_status", "description": "Active/inactive user subscription status", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/preparation/prep_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_preparation", "materialized": "table", "tags": ["preparation"]}, "created_at": 1761656593.255104, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_preparation`.`prep_users`", "raw_code": "{{ config(\r\n    materialized='table', \r\n    tags=['preparation']\r\n) }}\r\n\r\nselect\r\n    user_id,\r\n    initcap(trim(name)) as name,\r\n    lower(trim(email)) as email,\r\n    initcap(trim(country)) as country,\r\n    initcap(trim(city)) as city,\r\n    date(join_date) as join_date,\r\n    subscription_status,\r\n    created_at,\r\n    run_date_bq\r\nfrom {{ source('jcdeol004_alfon_movie_streaming_raw', 'raw_users') }}\r\n\r\nqualify row_number() over (partition by user_id order by created_at desc) = 1", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_raw", "raw_users"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.prep_watch_sessions": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_preparation", "name": "prep_watch_sessions", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "movie_streaming/preparation/prep_watch_sessions.sql", "original_file_path": "models/movie_streaming/preparation/prep_watch_sessions.sql", "unique_id": "model.dbt_alfon_project.prep_watch_sessions", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "prep_watch_sessions"], "alias": "prep_watch_sessions", "checksum": {"name": "sha256", "checksum": "57286cfe19731ddc8779a364932bce4810ebb757043c22a3a7a587fff5081dd3"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_movie_streaming_preparation", "database": null, "tags": ["preparation"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "session_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["preparation"], "description": "Prepared watch sessions table with session-level data", "columns": {"session_id": {"name": "session_id", "description": "Unique identifier for each watch session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "FK to prep_users", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "movie_id": {"name": "movie_id", "description": "FK to prep_movies", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Start time of the watch session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/movie_streaming/preparation/prep_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_movie_streaming_preparation", "materialized": "incremental", "unique_key": "session_id", "incremental_strategy": "merge", "tags": ["preparation"]}, "created_at": 1761656593.2569177, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_preparation`.`prep_watch_sessions`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='session_id',\r\n    incremental_strategy='merge', \r\n    tags=['preparation']\r\n) }}\r\n\r\nwith base as (\r\n    select\r\n        session_id,\r\n        user_id,\r\n        movie_id,\r\n        device_type,\r\n        start_time,\r\n        end_time,\r\n        completion_rate,\r\n        created_at,\r\n        run_date_bq\r\n    from {{ source('jcdeol004_alfon_movie_streaming_raw', 'raw_watch_sessions') }}\r\n    {% if is_incremental() %}\r\n        where run_date_bq > (select max(run_date_bq) from {{ this }})\r\n    {% endif %}\r\n)\r\n\r\nselect\r\n    session_id,\r\n    user_id,\r\n    movie_id,\r\n    device_type,\r\n    start_time,\r\n    end_time,\r\n    completion_rate,\r\n    created_at,\r\n    run_date_bq\r\nfrom base\r\nqualify row_number() over (partition by session_id order by created_at desc) = 1", "language": "sql", "refs": [], "sources": [["jcdeol004_alfon_movie_streaming_raw", "raw_watch_sessions"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_watch_sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.mart_taxi_trip_holiday_daily": {"database": "purwadika", "schema": "jcdeol004_alfon_taxi_trip_mart", "name": "mart_taxi_trip_holiday_daily", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "taxi_trip/mart/mart_taxi_trip_holiday_daily.sql", "original_file_path": "models/taxi_trip/mart/mart_taxi_trip_holiday_daily.sql", "unique_id": "model.dbt_alfon_project.mart_taxi_trip_holiday_daily", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "mart_taxi_trip_holiday_daily"], "alias": "mart_taxi_trip_holiday_daily", "checksum": {"name": "sha256", "checksum": "5592926ef053d60aaa8d2c6752e1c66b1d0002ed9e517b388402f5f48bff1e34"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_taxi_trip_mart", "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["mart"], "description": "Daily aggregated metrics of taxi trips during holidays/weekends", "columns": {"trip_hour": {"name": "trip_hour", "description": "Holiday trip hour", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trip_date": {"name": "trip_date", "description": "Holiday trip date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_trip": {"name": "total_trip", "description": "Total trips across all zones", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_revenue": {"name": "total_revenue", "description": "Total revenue across all zones", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_total_amount": {"name": "avg_total_amount", "description": "Average fare across trips", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_distance": {"name": "avg_distance", "description": "Average distance across trips", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/taxi_trip/mart/mart_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_taxi_trip_mart", "materialized": "table", "tags": ["mart"]}, "created_at": 1761656593.3677378, "relation_name": "`purwadika`.`jcdeol004_alfon_taxi_trip_mart`.`mart_taxi_trip_holiday_daily`", "raw_code": "{{ config(\r\n    materialized='table',\r\n    tags=['mart']\r\n) }}\r\n\r\n\r\nselect\r\n    trip_date,\r\n    sum(total_trip) as total_trip,\r\n    sum(total_revenue) as total_revenue,\r\n    sum(total_revenue) / sum(total_trip) as avg_total_amount,\r\n    sum(avg_distance * total_trip) / sum(total_trip) as avg_distance,\r\n    current_date(\"Asia/Jakarta\") as run_date_bq\r\nfrom {{ ref('mart_taxi_trip_holiday_zone_flow') }}\r\ngroup by trip_date", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_zone_flow", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.mart_taxi_trip_holiday_summary": {"database": "purwadika", "schema": "jcdeol004_alfon_taxi_trip_mart", "name": "mart_taxi_trip_holiday_summary", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "taxi_trip/mart/mart_taxi_trip_holiday_summary.sql", "original_file_path": "models/taxi_trip/mart/mart_taxi_trip_holiday_summary.sql", "unique_id": "model.dbt_alfon_project.mart_taxi_trip_holiday_summary", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "mart_taxi_trip_holiday_summary"], "alias": "mart_taxi_trip_holiday_summary", "checksum": {"name": "sha256", "checksum": "a852dc979617625cd236e9b2ce883679209f9319cf435d72a7b0720bf0cfb195"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_taxi_trip_mart", "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["mart"], "description": "Monthly summary of taxi trips on weekends (Friday\u2013Sunday), with metrics per holiday type", "columns": {"year": {"name": "year", "description": "Year of the holiday month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Month of the holiday", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "holiday_type": {"name": "holiday_type", "description": "Type of weekend day (Friday, Saturday, Sunday)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_trip": {"name": "total_trip", "description": "Total number of trips in that month and holiday type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_revenue": {"name": "total_revenue", "description": "Total revenue in that month and holiday type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_total_amount": {"name": "avg_total_amount", "description": "Average spending per trip (weighted)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_distance": {"name": "avg_distance", "description": "Average distance per trip (weighted)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "holiday_days": {"name": "holiday_days", "description": "Number of Friday/Saturday/Sunday days in the month", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/taxi_trip/mart/mart_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_taxi_trip_mart", "materialized": "table", "tags": ["mart"]}, "created_at": 1761656593.3691502, "relation_name": "`purwadika`.`jcdeol004_alfon_taxi_trip_mart`.`mart_taxi_trip_holiday_summary`", "raw_code": "{{ config(\r\n    materialized='table',\r\n    tags=['mart']\r\n) }}\r\n\r\n\r\nwith daily as (\r\n    select *\r\n    from {{ ref('mart_taxi_trip_holiday_daily') }}\r\n),\r\nholiday_type as (\r\n    select date, holiday_type\r\n    from {{ ref('dim_holiday') }}\r\n)\r\n\r\nselect\r\n    extract(year from d.trip_date) as year,\r\n    extract(month from d.trip_date) as month,\r\n    h.holiday_type,\r\n    sum(d.total_trip) as total_trip,\r\n    sum(d.total_revenue) as total_revenue,\r\n    sum(d.total_revenue) / sum(d.total_trip) as avg_total_amount,\r\n    sum(d.avg_distance * d.total_trip) / sum(d.total_trip) as avg_distance,\r\n    count(distinct d.trip_date) as holiday_days,\r\n    current_date(\"Asia/Jakarta\") as run_date_bq\r\nfrom daily d\r\nleft join holiday_type h\r\n    on d.trip_date = h.date\r\ngroup by 1,2,3\r\norder by year, month, holiday_type", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_daily", "package": null, "version": null}, {"name": "dim_holiday", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_daily", "model.dbt_alfon_project.dim_holiday"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow": {"database": "purwadika", "schema": "jcdeol004_alfon_taxi_trip_mart", "name": "mart_taxi_trip_holiday_zone_flow", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "taxi_trip/mart/mart_taxi_trip_holiday_zone_flow.sql", "original_file_path": "models/taxi_trip/mart/mart_taxi_trip_holiday_zone_flow.sql", "unique_id": "model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "mart_taxi_trip_holiday_zone_flow"], "alias": "mart_taxi_trip_holiday_zone_flow", "checksum": {"name": "sha256", "checksum": "ecb48efde8e8c7879650b101953d7d38b098be0a8958f7d6d21231269c704819"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_taxi_trip_mart", "database": null, "tags": ["mart"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["trip_date", "trip_hour", "pickup_zone", "dropoff_zone"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "cluster_by": ["pickup_zone", "dropoff_zone"], "partition_by": {"field": "trip_date", "data_type": "date"}, "post-hook": [], "pre-hook": []}, "tags": ["mart"], "description": "Incremental mart of taxi trip flows (pickup -> dropoff) during weekends/holidays, aggregated by date and hour.", "columns": {"trip_date": {"name": "trip_date", "description": "The trip date (only Friday\u2013Sunday included via dim_holiday)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trip_hour": {"name": "trip_hour", "description": "Hour of the trip (0\u201323) extracted from pickup_datetime", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pickup_zone": {"name": "pickup_zone", "description": "Pickup taxi zone name (from dim_location)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dropoff_zone": {"name": "dropoff_zone", "description": "Dropoff taxi zone name (from dim_location)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_trip": {"name": "total_trip", "description": "Total number of trips for this date/hour/zone flow", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_total_amount": {"name": "avg_total_amount", "description": "Average fare amount per trip in this date/hour/zone flow", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_revenue": {"name": "total_revenue", "description": "Total revenue in this date/hour/zone flow", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_distance": {"name": "avg_distance", "description": "Average trip distance in this date/hour/zone flow", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/taxi_trip/mart/mart_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_taxi_trip_mart", "materialized": "incremental", "incremental_strategy": "merge", "unique_key": ["trip_date", "trip_hour", "pickup_zone", "dropoff_zone"], "partition_by": {"field": "trip_date", "data_type": "date"}, "cluster_by": ["pickup_zone", "dropoff_zone"], "tags": ["mart"]}, "created_at": 1761656593.3667743, "relation_name": "`purwadika`.`jcdeol004_alfon_taxi_trip_mart`.`mart_taxi_trip_holiday_zone_flow`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy='merge',\r\n    unique_key=['trip_date', 'trip_hour', 'pickup_zone', 'dropoff_zone'],\r\n    partition_by={\"field\": \"trip_date\", \"data_type\": \"date\"},\r\n    cluster_by=[\"pickup_zone\", \"dropoff_zone\"],\r\n    tags=['mart']\r\n) }}\r\n\r\n\r\nwith base as (\r\n    select\r\n        date(f.pickup_datetime) as trip_date,\r\n        extract(hour from f.pickup_datetime) as trip_hour,\r\n        l1.zone as pickup_zone,\r\n        l2.zone as dropoff_zone,\r\n        f.total_amount,\r\n        f.fare_amount,\r\n        f.tip_amount,\r\n        f.trip_distance\r\n    from {{ ref('fact_taxi_trip') }} f\r\n    left join {{ ref('dim_location') }} l1\r\n        on f.pulocationid = l1.locationid\r\n    left join {{ ref('dim_location') }} l2\r\n        on f.dolocationid = l2.locationid\r\n    where exists (\r\n        select 1\r\n        from {{ ref('dim_holiday') }} h\r\n        where h.date = date(f.pickup_datetime)\r\n          and h.hour = extract(hour from f.pickup_datetime)\r\n    )\r\n)\r\n\r\nselect\r\n    trip_date,\r\n    trip_hour,\r\n    pickup_zone,\r\n    dropoff_zone,\r\n    count(*) as total_trip,\r\n    avg(total_amount) as avg_total_amount,\r\n    sum(total_amount) as total_revenue,\r\n    avg(trip_distance) as avg_distance,\r\n    current_date(\"Asia/Jakarta\") as run_date_bq\r\nfrom base\r\ngroup by 1,2,3,4", "language": "sql", "refs": [{"name": "fact_taxi_trip", "package": null, "version": null}, {"name": "dim_location", "package": null, "version": null}, {"name": "dim_location", "package": null, "version": null}, {"name": "dim_holiday", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_alfon_project.fact_taxi_trip", "model.dbt_alfon_project.dim_location", "model.dbt_alfon_project.dim_holiday"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.dim_holiday": {"database": "purwadika", "schema": "jcdeol004_alfon_taxi_trip_model", "name": "dim_holiday", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "taxi_trip/model/dim_holiday.sql", "original_file_path": "models/taxi_trip/model/dim_holiday.sql", "unique_id": "model.dbt_alfon_project.dim_holiday", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "dim_holiday"], "alias": "dim_holiday", "checksum": {"name": "sha256", "checksum": "a14b7adf63d64f638d32961e810c69953a9e9ba840615e8bb34effa9e82885cc"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_taxi_trip_model", "database": null, "tags": ["model"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["model"], "description": "Dimension table containing weekend dates (Friday-Sunday) expanded by hour for mobility analysis", "columns": {"date": {"name": "date", "description": "The calendar date (only Friday, Saturday, Sunday)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "holiday_type": {"name": "holiday_type", "description": "The type of weekend day (Friday, Saturday, or Sunday)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hour": {"name": "hour", "description": "Hour of day (0\u201323)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "holiday_hour": {"name": "holiday_hour", "description": "Timestamp representing the specific date + hour (granularity hour)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/taxi_trip/model/model_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_taxi_trip_model", "materialized": "table", "tags": ["model"]}, "created_at": 1761656593.397716, "relation_name": "`purwadika`.`jcdeol004_alfon_taxi_trip_model`.`dim_holiday`", "raw_code": "{{ config(\r\n    materialized='table',\r\n    tags=['model']\r\n) }}\r\n\r\nwith calendar as (\r\n    -- generate semua tanggal dari 2023-01-01 s/d akhir tahun berjalan\r\n    select day as date\r\n    from unnest(\r\n        generate_date_array(\r\n            date('2023-01-01'),\r\n            last_day(current_date(), year),\r\n            interval 1 day\r\n        )\r\n    ) as day\r\n),\r\nweekend_days as (\r\n    -- hanya Jumat(6), Sabtu(7), Minggu(1)\r\n    select\r\n        date,\r\n        case extract(dayofweek from date)\r\n            when 6 then 'Friday'\r\n            when 7 then 'Saturday'\r\n            when 1 then 'Sunday'\r\n        end as holiday_type\r\n    from calendar\r\n    where extract(dayofweek from date) in (6,7,1)\r\n),\r\nhours as (\r\n    -- generate jam 0\u201323\r\n    select hour\r\n    from unnest(generate_array(0, 23, 1)) as hour\r\n),\r\nholiday_with_hours as (\r\n    select\r\n        d.date,\r\n        d.holiday_type,\r\n        h.hour,\r\n        timestamp_add(timestamp(d.date), interval h.hour hour) as holiday_hour\r\n    from weekend_days d\r\n    cross join hours h\r\n)\r\n\r\nselect * from holiday_with_hours", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.dim_location": {"database": "purwadika", "schema": "jcdeol004_alfon_taxi_trip_model", "name": "dim_location", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "taxi_trip/model/dim_location.sql", "original_file_path": "models/taxi_trip/model/dim_location.sql", "unique_id": "model.dbt_alfon_project.dim_location", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "dim_location"], "alias": "dim_location", "checksum": {"name": "sha256", "checksum": "bfc28cd90722852e9b5442df7a30dd8e8db589d8a08b5a134d9b27d181628704"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_taxi_trip_model", "database": null, "tags": ["model"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["model"], "description": "Dimension table for taxi zones with borough and service zones", "columns": {"locationid": {"name": "locationid", "description": "Unique location ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "borough": {"name": "borough", "description": "Borough name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zone": {"name": "zone", "description": "Taxi zone", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_zone": {"name": "service_zone", "description": "Service zone (e.g. Boro, Yellow, Green)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/taxi_trip/model/model_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_taxi_trip_model", "materialized": "table", "tags": ["model"]}, "created_at": 1761656593.3962762, "relation_name": "`purwadika`.`jcdeol004_alfon_taxi_trip_model`.`dim_location`", "raw_code": "{{ config(\r\n    materialized='table',\r\n    tags=['model']\r\n) }}\r\n\r\n\r\nselect\r\n    locationid,\r\n    borough,\r\n    zone,\r\n    service_zone\r\nfrom {{ source('taxi_zone', 'raw_taxi_zone') }}", "language": "sql", "refs": [], "sources": [["taxi_zone", "raw_taxi_zone"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_alfon_project.taxi_zone.raw_taxi_zone"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.dim_payment_type": {"database": "purwadika", "schema": "jcdeol004_alfon_taxi_trip_model", "name": "dim_payment_type", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "taxi_trip/model/dim_payment_type.sql", "original_file_path": "models/taxi_trip/model/dim_payment_type.sql", "unique_id": "model.dbt_alfon_project.dim_payment_type", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "dim_payment_type"], "alias": "dim_payment_type", "checksum": {"name": "sha256", "checksum": "82e7292ddbde8912c350c560c745818378932df26ee71e5fab7e52cdd3f59bc6"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_taxi_trip_model", "database": null, "tags": ["model"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["model"], "description": "Dimension table for payment type codes and descriptions", "columns": {"payment_type": {"name": "payment_type", "description": "Payment type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_desc": {"name": "payment_desc", "description": "Payment type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/taxi_trip/model/model_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_taxi_trip_model", "materialized": "table", "tags": ["model"]}, "created_at": 1761656593.3949003, "relation_name": "`purwadika`.`jcdeol004_alfon_taxi_trip_model`.`dim_payment_type`", "raw_code": "{{ config(\r\n    materialized='table',\r\n    tags=['model']\r\n) }}\r\n\r\nselect *\r\nfrom (\r\n    select 0 as payment_type, 'Flex Fare trip' as payment_desc union all\r\n    select 1, 'Credit card' union all\r\n    select 2, 'Cash' union all\r\n    select 3, 'No charge' union all\r\n    select 4, 'Dispute' union all\r\n    select 5, 'Unknown' union all\r\n    select 6, 'Voided trip'\r\n)", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.fact_taxi_trip": {"database": "purwadika", "schema": "jcdeol004_alfon_taxi_trip_model", "name": "fact_taxi_trip", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "taxi_trip/model/fact_taxi_trip.sql", "original_file_path": "models/taxi_trip/model/fact_taxi_trip.sql", "unique_id": "model.dbt_alfon_project.fact_taxi_trip", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "fact_taxi_trip"], "alias": "fact_taxi_trip", "checksum": {"name": "sha256", "checksum": "cd9110fe5d38bfa712a76e7f26bd6f7730469572afc59ebc3a49bafc96d0db59"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_taxi_trip_model", "database": null, "tags": ["model"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "md5_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "cluster_by": ["taxi_type", "pulocationid"], "partition_by": {"field": "pickup_datetime", "data_type": "timestamp", "granularity": "month"}, "post-hook": [], "pre-hook": []}, "tags": ["model"], "description": "Fact table containing all taxi trips (yellow & green) filtered and transformed for analysis", "columns": {"md5_key": {"name": "md5_key", "description": "Surrogate key (md5 hash of unique fields)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "taxi_type": {"name": "taxi_type", "description": "Taxi type (yellow, green)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pickup_datetime": {"name": "pickup_datetime", "description": "Pickup timestamp of the trip", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dropoff_datetime": {"name": "dropoff_datetime", "description": "Dropoff timestamp of the trip", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pulocationid": {"name": "pulocationid", "description": "Pickup location (linked to dim_location)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dolocationid": {"name": "dolocationid", "description": "Dropoff location (linked to dim_location)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "passenger_count": {"name": "passenger_count", "description": "Number of passengers in the trip", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_type": {"name": "payment_type", "description": "Payment type (linked to dim_payment_type)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fare_amount": {"name": "fare_amount", "description": "Fare amount charged", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tip_amount": {"name": "tip_amount", "description": "Tip amount paid", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total fare including extras", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trip_distance": {"name": "trip_distance", "description": "Distance of trip in miles", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_date_bq": {"name": "run_date_bq", "description": "Pipeline run date for incremental load", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/taxi_trip/model/model_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_taxi_trip_model", "materialized": "incremental", "incremental_strategy": "merge", "unique_key": "md5_key", "partition_by": {"field": "pickup_datetime", "data_type": "timestamp", "granularity": "month"}, "cluster_by": ["taxi_type", "pulocationid"], "tags": ["model"]}, "created_at": 1761656593.3940003, "relation_name": "`purwadika`.`jcdeol004_alfon_taxi_trip_model`.`fact_taxi_trip`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy='merge',\r\n    unique_key='md5_key',\r\n    partition_by={\"field\": \"pickup_datetime\", \"data_type\": \"timestamp\", \"granularity\": \"month\"},\r\n    cluster_by=[\"taxi_type\", \"pulocationid\"],\r\n    tags=['model']\r\n) }}\r\n\r\nwith prep as (\r\n    select *\r\n    from {{ ref('prep_taxi_trip') }}\r\n    {% if is_incremental() %}\r\n        where date(date_trunc(pickup_datetime, month)) >= (\r\n            select date_sub(\r\n                coalesce(date(max(date_trunc(pickup_datetime, month))), date('2023-01-01')),\r\n                interval 2 month\r\n            )\r\n            from {{ this }}\r\n        )\r\n    {% endif %}\r\n)\r\n\r\nselect\r\n    md5_key,\r\n    taxi_type,\r\n    pickup_datetime,\r\n    dropoff_datetime,\r\n    pulocationid,\r\n    dolocationid,\r\n    passenger_count,\r\n    cast(payment_type as int64) as payment_type,\r\n    fare_amount,\r\n    tip_amount,\r\n    total_amount,\r\n    trip_distance,\r\n    current_date(\"Asia/Jakarta\") as run_date_bq\r\nfrom prep", "language": "sql", "refs": [{"name": "prep_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_alfon_project.prep_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_alfon_project.prep_taxi_trip": {"database": "purwadika", "schema": "jcdeol004_alfon_taxi_trip_preparation", "name": "prep_taxi_trip", "resource_type": "model", "package_name": "dbt_alfon_project", "path": "taxi_trip/preparation/prep_taxi_trip.sql", "original_file_path": "models/taxi_trip/preparation/prep_taxi_trip.sql", "unique_id": "model.dbt_alfon_project.prep_taxi_trip", "fqn": ["dbt_alfon_project", "taxi_trip", "preparation", "prep_taxi_trip"], "alias": "prep_taxi_trip", "checksum": {"name": "sha256", "checksum": "111d3adc9b8f83b86d91368b60d79bbd6bf21b816d5c7c11ddbf92722600e52f"}, "config": {"enabled": true, "alias": null, "schema": "jcdeol004_alfon_taxi_trip_preparation", "database": null, "tags": ["preparation"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "md5_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "cluster_by": ["taxi_type", "pulocationid"], "partition_by": {"field": "pickup_datetime", "data_type": "timestamp", "granularity": "month"}, "post-hook": [], "pre-hook": []}, "tags": ["preparation"], "description": "Prepared taxi trip data combining Yellow and Green trips with cleaning and deduplication", "columns": {"md5_key": {"name": "md5_key", "description": "Unique hash key generated from key trip fields for deduplication", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "taxi_type": {"name": "taxi_type", "description": "Taxi type: Yellow or Green", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vendorid": {"name": "vendorid", "description": "Identifier for the vendor associated with the trip", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pickup_datetime": {"name": "pickup_datetime", "description": "Timestamp of when the trip started", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dropoff_datetime": {"name": "dropoff_datetime", "description": "Timestamp of when the trip ended", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pulocationid": {"name": "pulocationid", "description": "TLC Taxi Zone ID where the passenger was picked up", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dolocationid": {"name": "dolocationid", "description": "TLC Taxi Zone ID where the passenger was dropped off", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_type": {"name": "payment_type", "description": "Numeric code for how the passenger paid", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "passenger_count": {"name": "passenger_count", "description": "Number of passengers on the trip", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fare_amount": {"name": "fare_amount", "description": "Base fare for the trip", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tip_amount": {"name": "tip_amount", "description": "Tip paid by passenger", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total amount charged for the trip", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trip_distance": {"name": "trip_distance", "description": "Distance of the trip in miles", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_alfon_project://models/taxi_trip/preparation/prep_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "jcdeol004_alfon_taxi_trip_preparation", "materialized": "incremental", "incremental_strategy": "merge", "unique_key": "md5_key", "partition_by": {"field": "pickup_datetime", "data_type": "timestamp", "granularity": "month"}, "cluster_by": ["taxi_type", "pulocationid"], "tags": ["preparation"]}, "created_at": 1761656593.439846, "relation_name": "`purwadika`.`jcdeol004_alfon_taxi_trip_preparation`.`prep_taxi_trip`", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy='merge', \r\n    unique_key='md5_key',\r\n    partition_by={\"field\": \"pickup_datetime\", \"data_type\": \"timestamp\", \"granularity\": \"month\"},\r\n    cluster_by=[\"taxi_type\", \"pulocationid\"],\r\n    tags=['preparation']\r\n) }}\r\n\r\n-- ----------------------------------\r\n-- Step 1: Filter by month (incremental)\r\n-- ----------------------------------\r\nwith yellow_filtered as (\r\n    select \r\n        md5_key,\r\n        taxi_type,\r\n        vendorid,\r\n        pickup_datetime,\r\n        dropoff_datetime,\r\n        pulocationid,\r\n        dolocationid,\r\n        cast(payment_type as int64) as payment_type,\r\n        passenger_count,\r\n        fare_amount,\r\n        tip_amount,\r\n        total_amount,\r\n        trip_distance\r\n    from {{ source('taxi_trip_raw', 'raw_yellow_taxi_trip') }}\r\n    {% if is_incremental() %}\r\n        where date(date_trunc(pickup_datetime, month)) >= (\r\n            select date_sub(\r\n                coalesce(date(max(date_trunc(pickup_datetime, month))), date('2023-01-01')),\r\n                interval 2 month\r\n            )\r\n            from {{ this }}\r\n        )\r\n    {% endif %}\r\n),\r\n\r\ngreen_filtered as (\r\n    select\r\n        md5_key,\r\n        taxi_type,\r\n        vendorid,\r\n        pickup_datetime,\r\n        dropoff_datetime,\r\n        pulocationid,\r\n        dolocationid,\r\n        cast(payment_type as int64) as payment_type,\r\n        passenger_count,\r\n        fare_amount,\r\n        tip_amount,\r\n        total_amount,\r\n        trip_distance\r\n    from {{ source('taxi_trip_raw', 'raw_green_taxi_trip') }}\r\n    {% if is_incremental() %}\r\n        where date(date_trunc(pickup_datetime, month)) >= (\r\n            select date_sub(\r\n                coalesce(date(max(date_trunc(pickup_datetime, month))), date('2023-01-01')),\r\n                interval 2 month\r\n            )\r\n            from {{ this }}\r\n        )\r\n    {% endif %}\r\n),\r\n\r\n-- ----------------------------------\r\n-- Step 2: Union filtered data\r\n-- ----------------------------------\r\nunioned as (\r\n    select * from yellow_filtered\r\n    union all\r\n    select * from green_filtered\r\n),\r\n\r\n-- ----------------------------------\r\n-- Step 3: Clean invalid rows\r\n-- ----------------------------------\r\ncleaned as (\r\n    select\r\n        md5_key,\r\n        taxi_type,\r\n        vendorid,\r\n        pickup_datetime,\r\n        dropoff_datetime,\r\n        pulocationid,\r\n        dolocationid,\r\n        payment_type,\r\n        passenger_count,\r\n        fare_amount,\r\n        tip_amount,\r\n        total_amount,\r\n        trip_distance\r\n    from unioned\r\n    where trip_distance > 0\r\n      and fare_amount > 0\r\n      and total_amount > 0\r\n      and passenger_count > 0\r\n      and pickup_datetime < dropoff_datetime\r\n),\r\n\r\n-- ----------------------------------\r\n-- Step 4: Deduplicate by md5_key (QUALIFY)\r\n-- ----------------------------------\r\ndeduped as (\r\n    select\r\n        md5_key,\r\n        taxi_type,\r\n        vendorid,\r\n        pickup_datetime,\r\n        dropoff_datetime,\r\n        pulocationid,\r\n        dolocationid,\r\n        payment_type,\r\n        passenger_count,\r\n        fare_amount,\r\n        tip_amount,\r\n        total_amount,\r\n        trip_distance\r\n    from cleaned\r\n    qualify row_number() over (\r\n        partition by md5_key\r\n        order by pickup_datetime asc\r\n    ) = 1\r\n)\r\n\r\n-- ----------------------------------\r\n-- Final select\r\n-- ----------------------------------\r\nselect\r\n    md5_key,\r\n    taxi_type,\r\n    vendorid,\r\n    pickup_datetime,\r\n    dropoff_datetime,\r\n    pulocationid,\r\n    dolocationid,\r\n    payment_type,\r\n    passenger_count,\r\n    fare_amount,\r\n    tip_amount,\r\n    total_amount,\r\n    trip_distance,\r\n    current_date(\"Asia/Jakarta\") as run_date_bq\r\nfrom deduped", "language": "sql", "refs": [], "sources": [["taxi_trip_raw", "raw_yellow_taxi_trip"], ["taxi_trip_raw", "raw_green_taxi_trip"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_alfon_project.taxi_trip_raw.raw_yellow_taxi_trip", "source.dbt_alfon_project.taxi_trip_raw.raw_green_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_movie_id.15eb004770": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "movie_id", "model": "{{ get_where_subquery(ref('mart_movie_popularity_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_movie_popularity_monthly_movie_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_movie_popularity_monthly_movie_id.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_movie_id.15eb004770", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "not_null_mart_movie_popularity_monthly_movie_id"], "alias": "not_null_mart_movie_popularity_monthly_movie_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1202028, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_movie_popularity_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_movie_popularity_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_id", "file_key_name": "models.mart_movie_popularity_monthly", "attached_node": "model.dbt_alfon_project.mart_movie_popularity_monthly"}, "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_month_key.47e509fbde": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month_key", "model": "{{ get_where_subquery(ref('mart_movie_popularity_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_movie_popularity_monthly_month_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_movie_popularity_monthly_month_key.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_month_key.47e509fbde", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "not_null_mart_movie_popularity_monthly_month_key"], "alias": "not_null_mart_movie_popularity_monthly_month_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1225467, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_movie_popularity_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_movie_popularity_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "month_key", "file_key_name": "models.mart_movie_popularity_monthly", "attached_node": "model.dbt_alfon_project.mart_movie_popularity_monthly"}, "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_movie_month_key.1a00591e3d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "movie_month_key", "model": "{{ get_where_subquery(ref('mart_movie_popularity_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_movie_popularity_monthly_movie_month_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_movie_popularity_monthly_movie_month_key.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_movie_month_key.1a00591e3d", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "not_null_mart_movie_popularity_monthly_movie_month_key"], "alias": "not_null_mart_movie_popularity_monthly_movie_month_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.125364, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_movie_popularity_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_movie_popularity_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_month_key", "file_key_name": "models.mart_movie_popularity_monthly", "attached_node": "model.dbt_alfon_project.mart_movie_popularity_monthly"}, "test.dbt_alfon_project.unique_mart_movie_popularity_monthly_movie_month_key.6ae24ba573": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "movie_month_key", "model": "{{ get_where_subquery(ref('mart_movie_popularity_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_mart_movie_popularity_monthly_movie_month_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_mart_movie_popularity_monthly_movie_month_key.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.unique_mart_movie_popularity_monthly_movie_month_key.6ae24ba573", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "unique_mart_movie_popularity_monthly_movie_month_key"], "alias": "unique_mart_movie_popularity_monthly_movie_month_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1277184, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_movie_popularity_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.mart_movie_popularity_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_month_key", "file_key_name": "models.mart_movie_popularity_monthly", "attached_node": "model.dbt_alfon_project.mart_movie_popularity_monthly"}, "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_movie_id.e86c6ea5e8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "movie_id", "model": "{{ get_where_subquery(ref('mart_movie_rating_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_movie_rating_monthly_movie_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_movie_rating_monthly_movie_id.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_movie_id.e86c6ea5e8", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "not_null_mart_movie_rating_monthly_movie_id"], "alias": "not_null_mart_movie_rating_monthly_movie_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1296709, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_movie_rating_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_movie_rating_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_id", "file_key_name": "models.mart_movie_rating_monthly", "attached_node": "model.dbt_alfon_project.mart_movie_rating_monthly"}, "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_month_key.6110cdcd83": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month_key", "model": "{{ get_where_subquery(ref('mart_movie_rating_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_movie_rating_monthly_month_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_movie_rating_monthly_month_key.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_month_key.6110cdcd83", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "not_null_mart_movie_rating_monthly_month_key"], "alias": "not_null_mart_movie_rating_monthly_month_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.13154, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_movie_rating_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_movie_rating_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "month_key", "file_key_name": "models.mart_movie_rating_monthly", "attached_node": "model.dbt_alfon_project.mart_movie_rating_monthly"}, "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_movie_month_key.c090141aef": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "movie_month_key", "model": "{{ get_where_subquery(ref('mart_movie_rating_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_movie_rating_monthly_movie_month_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_movie_rating_monthly_movie_month_key.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_movie_month_key.c090141aef", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "not_null_mart_movie_rating_monthly_movie_month_key"], "alias": "not_null_mart_movie_rating_monthly_movie_month_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.133124, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_movie_rating_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_movie_rating_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_month_key", "file_key_name": "models.mart_movie_rating_monthly", "attached_node": "model.dbt_alfon_project.mart_movie_rating_monthly"}, "test.dbt_alfon_project.unique_mart_movie_rating_monthly_movie_month_key.546b490e5a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "movie_month_key", "model": "{{ get_where_subquery(ref('mart_movie_rating_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_mart_movie_rating_monthly_movie_month_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_mart_movie_rating_monthly_movie_month_key.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.unique_mart_movie_rating_monthly_movie_month_key.546b490e5a", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "unique_mart_movie_rating_monthly_movie_month_key"], "alias": "unique_mart_movie_rating_monthly_movie_month_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1348155, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_movie_rating_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.mart_movie_rating_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_month_key", "file_key_name": "models.mart_movie_rating_monthly", "attached_node": "model.dbt_alfon_project.mart_movie_rating_monthly"}, "test.dbt_alfon_project.not_null_mart_user_activity_monthly_user_id.af27035a1c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('mart_user_activity_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_user_activity_monthly_user_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_user_activity_monthly_user_id.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_user_activity_monthly_user_id.af27035a1c", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "not_null_mart_user_activity_monthly_user_id"], "alias": "not_null_mart_user_activity_monthly_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1362648, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_user_activity_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_user_activity_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.mart_user_activity_monthly", "attached_node": "model.dbt_alfon_project.mart_user_activity_monthly"}, "test.dbt_alfon_project.not_null_mart_user_activity_monthly_month_key.0dd3c3f659": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month_key", "model": "{{ get_where_subquery(ref('mart_user_activity_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_user_activity_monthly_month_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_user_activity_monthly_month_key.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_user_activity_monthly_month_key.0dd3c3f659", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "not_null_mart_user_activity_monthly_month_key"], "alias": "not_null_mart_user_activity_monthly_month_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1392467, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_user_activity_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_user_activity_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "month_key", "file_key_name": "models.mart_user_activity_monthly", "attached_node": "model.dbt_alfon_project.mart_user_activity_monthly"}, "test.dbt_alfon_project.not_null_mart_user_activity_monthly_user_month_key.f7e031972b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_month_key", "model": "{{ get_where_subquery(ref('mart_user_activity_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_user_activity_monthly_user_month_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_user_activity_monthly_user_month_key.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_user_activity_monthly_user_month_key.f7e031972b", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "not_null_mart_user_activity_monthly_user_month_key"], "alias": "not_null_mart_user_activity_monthly_user_month_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.144153, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_user_activity_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_user_activity_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_month_key", "file_key_name": "models.mart_user_activity_monthly", "attached_node": "model.dbt_alfon_project.mart_user_activity_monthly"}, "test.dbt_alfon_project.unique_mart_user_activity_monthly_user_month_key.38a5e52f95": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_month_key", "model": "{{ get_where_subquery(ref('mart_user_activity_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_mart_user_activity_monthly_user_month_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_mart_user_activity_monthly_user_month_key.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.unique_mart_user_activity_monthly_user_month_key.38a5e52f95", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "unique_mart_user_activity_monthly_user_month_key"], "alias": "unique_mart_user_activity_monthly_user_month_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1458805, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_user_activity_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.mart_user_activity_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_month_key", "file_key_name": "models.mart_user_activity_monthly", "attached_node": "model.dbt_alfon_project.mart_user_activity_monthly"}, "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_subscription_id.42831f320a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('mart_subscription_revenue_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_subscription_revenue_monthly_subscription_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_subscription_revenue_monthly_subscription_id.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_subscription_id.42831f320a", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "not_null_mart_subscription_revenue_monthly_subscription_id"], "alias": "not_null_mart_subscription_revenue_monthly_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.147087, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_subscription_revenue_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_subscription_revenue_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.mart_subscription_revenue_monthly", "attached_node": "model.dbt_alfon_project.mart_subscription_revenue_monthly"}, "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_month_key.3fe417258d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month_key", "model": "{{ get_where_subquery(ref('mart_subscription_revenue_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_subscription_revenue_monthly_month_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_subscription_revenue_monthly_month_key.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_month_key.3fe417258d", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "not_null_mart_subscription_revenue_monthly_month_key"], "alias": "not_null_mart_subscription_revenue_monthly_month_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1484895, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_subscription_revenue_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_subscription_revenue_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "month_key", "file_key_name": "models.mart_subscription_revenue_monthly", "attached_node": "model.dbt_alfon_project.mart_subscription_revenue_monthly"}, "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_subscription_month_key.c7de84fded": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_month_key", "model": "{{ get_where_subquery(ref('mart_subscription_revenue_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_subscription_revenue_monthly_subscription_month_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_subscription_rev_4815061795c69656ecc31535c1a9b199.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_subscription_month_key.c7de84fded", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "not_null_mart_subscription_revenue_monthly_subscription_month_key"], "alias": "not_null_mart_subscription_rev_4815061795c69656ecc31535c1a9b199", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_mart_subscription_rev_4815061795c69656ecc31535c1a9b199", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_mart_subscription_rev_4815061795c69656ecc31535c1a9b199"}, "created_at": 1761656593.1498184, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_mart_subscription_rev_4815061795c69656ecc31535c1a9b199\") }}", "language": "sql", "refs": [{"name": "mart_subscription_revenue_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_subscription_revenue_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "subscription_month_key", "file_key_name": "models.mart_subscription_revenue_monthly", "attached_node": "model.dbt_alfon_project.mart_subscription_revenue_monthly"}, "test.dbt_alfon_project.unique_mart_subscription_revenue_monthly_subscription_month_key.2aabea2a29": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "subscription_month_key", "model": "{{ get_where_subquery(ref('mart_subscription_revenue_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_mart_subscription_revenue_monthly_subscription_month_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_mart_subscription_revenue_monthly_subscription_month_key.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.unique_mart_subscription_revenue_monthly_subscription_month_key.2aabea2a29", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "unique_mart_subscription_revenue_monthly_subscription_month_key"], "alias": "unique_mart_subscription_revenue_monthly_subscription_month_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1511986, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_subscription_revenue_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.mart_subscription_revenue_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "subscription_month_key", "file_key_name": "models.mart_subscription_revenue_monthly", "attached_node": "model.dbt_alfon_project.mart_subscription_revenue_monthly"}, "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_run_date_bq.814b57db4b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "run_date_bq", "model": "{{ get_where_subquery(ref('mart_subscription_revenue_monthly')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_subscription_revenue_monthly_run_date_bq", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_subscription_revenue_monthly_run_date_bq.sql", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_run_date_bq.814b57db4b", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "not_null_mart_subscription_revenue_monthly_run_date_bq"], "alias": "not_null_mart_subscription_revenue_monthly_run_date_bq", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1525002, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_subscription_revenue_monthly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_subscription_revenue_monthly"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "run_date_bq", "file_key_name": "models.mart_subscription_revenue_monthly", "attached_node": "model.dbt_alfon_project.mart_subscription_revenue_monthly"}, "test.dbt_alfon_project.not_null_dim_users_user_id.e754bb5812": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('dim_users')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_users_user_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_users_user_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_users_user_id.e754bb5812", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_dim_users_user_id"], "alias": "not_null_dim_users_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1850502, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.dim_users", "attached_node": "model.dbt_alfon_project.dim_users"}, "test.dbt_alfon_project.unique_dim_users_user_id.bcdc17b9f9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('dim_users')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_dim_users_user_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_dim_users_user_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.unique_dim_users_user_id.bcdc17b9f9", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "unique_dim_users_user_id"], "alias": "unique_dim_users_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.186299, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.dim_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.dim_users", "attached_node": "model.dbt_alfon_project.dim_users"}, "test.dbt_alfon_project.not_null_dim_users_name.ff1cc66807": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_users')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_users_name", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_users_name.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_users_name.ff1cc66807", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_dim_users_name"], "alias": "not_null_dim_users_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1878664, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "name", "file_key_name": "models.dim_users", "attached_node": "model.dbt_alfon_project.dim_users"}, "test.dbt_alfon_project.not_null_dim_users_email.f41c7984c2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ get_where_subquery(ref('dim_users')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_users_email", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_users_email.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_users_email.f41c7984c2", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_dim_users_email"], "alias": "not_null_dim_users_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1901689, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "email", "file_key_name": "models.dim_users", "attached_node": "model.dbt_alfon_project.dim_users"}, "test.dbt_alfon_project.unique_dim_users_email.53417c09f1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "email", "model": "{{ get_where_subquery(ref('dim_users')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_dim_users_email", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_dim_users_email.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.unique_dim_users_email.53417c09f1", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "unique_dim_users_email"], "alias": "unique_dim_users_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1913364, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.dim_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "email", "file_key_name": "models.dim_users", "attached_node": "model.dbt_alfon_project.dim_users"}, "test.dbt_alfon_project.not_null_dim_users_country.b6217b23ba": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('dim_users')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_users_country", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_users_country.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_users_country.b6217b23ba", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_dim_users_country"], "alias": "not_null_dim_users_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1925206, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "country", "file_key_name": "models.dim_users", "attached_node": "model.dbt_alfon_project.dim_users"}, "test.dbt_alfon_project.not_null_dim_users_join_date.635d96312d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "join_date", "model": "{{ get_where_subquery(ref('dim_users')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_users_join_date", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_users_join_date.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_users_join_date.635d96312d", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_dim_users_join_date"], "alias": "not_null_dim_users_join_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.193739, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "join_date", "file_key_name": "models.dim_users", "attached_node": "model.dbt_alfon_project.dim_users"}, "test.dbt_alfon_project.not_null_dim_subscriptions_subscription_id.593212df68": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('dim_subscriptions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_subscriptions_subscription_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_subscriptions_subscription_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_subscriptions_subscription_id.593212df68", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_dim_subscriptions_subscription_id"], "alias": "not_null_dim_subscriptions_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1949942, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_subscriptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_subscriptions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.dim_subscriptions", "attached_node": "model.dbt_alfon_project.dim_subscriptions"}, "test.dbt_alfon_project.unique_dim_subscriptions_subscription_id.aab39a989d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('dim_subscriptions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_dim_subscriptions_subscription_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_dim_subscriptions_subscription_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.unique_dim_subscriptions_subscription_id.aab39a989d", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "unique_dim_subscriptions_subscription_id"], "alias": "unique_dim_subscriptions_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.19625, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_subscriptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.dim_subscriptions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.dim_subscriptions", "attached_node": "model.dbt_alfon_project.dim_subscriptions"}, "test.dbt_alfon_project.not_null_dim_subscriptions_plan_type.ebd4738bae": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_type", "model": "{{ get_where_subquery(ref('dim_subscriptions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_subscriptions_plan_type", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_subscriptions_plan_type.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_subscriptions_plan_type.ebd4738bae", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_dim_subscriptions_plan_type"], "alias": "not_null_dim_subscriptions_plan_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1976874, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_subscriptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_subscriptions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "plan_type", "file_key_name": "models.dim_subscriptions", "attached_node": "model.dbt_alfon_project.dim_subscriptions"}, "test.dbt_alfon_project.not_null_dim_subscriptions_start_date.b35dad5f3d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_date", "model": "{{ get_where_subquery(ref('dim_subscriptions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_subscriptions_start_date", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_subscriptions_start_date.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_subscriptions_start_date.b35dad5f3d", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_dim_subscriptions_start_date"], "alias": "not_null_dim_subscriptions_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.1990368, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_subscriptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_subscriptions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "start_date", "file_key_name": "models.dim_subscriptions", "attached_node": "model.dbt_alfon_project.dim_subscriptions"}, "test.dbt_alfon_project.not_null_dim_subscriptions_status.64f3eb029e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "status", "model": "{{ get_where_subquery(ref('dim_subscriptions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_subscriptions_status", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_subscriptions_status.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_subscriptions_status.64f3eb029e", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_dim_subscriptions_status"], "alias": "not_null_dim_subscriptions_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2004404, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_subscriptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_subscriptions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "status", "file_key_name": "models.dim_subscriptions", "attached_node": "model.dbt_alfon_project.dim_subscriptions"}, "test.dbt_alfon_project.not_null_dim_movies_movie_id.0f96ca970d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "movie_id", "model": "{{ get_where_subquery(ref('dim_movies')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_movies_movie_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_movies_movie_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_movies_movie_id.0f96ca970d", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_dim_movies_movie_id"], "alias": "not_null_dim_movies_movie_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.201752, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_movies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_movies"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_id", "file_key_name": "models.dim_movies", "attached_node": "model.dbt_alfon_project.dim_movies"}, "test.dbt_alfon_project.unique_dim_movies_movie_id.2e7fb7860b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "movie_id", "model": "{{ get_where_subquery(ref('dim_movies')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_dim_movies_movie_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_dim_movies_movie_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.unique_dim_movies_movie_id.2e7fb7860b", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "unique_dim_movies_movie_id"], "alias": "unique_dim_movies_movie_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2033944, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_movies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.dim_movies"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_id", "file_key_name": "models.dim_movies", "attached_node": "model.dbt_alfon_project.dim_movies"}, "test.dbt_alfon_project.not_null_dim_movies_title.e533d1bb2e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "title", "model": "{{ get_where_subquery(ref('dim_movies')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_movies_title", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_movies_title.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_movies_title.e533d1bb2e", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_dim_movies_title"], "alias": "not_null_dim_movies_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2050989, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_movies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_movies"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "title", "file_key_name": "models.dim_movies", "attached_node": "model.dbt_alfon_project.dim_movies"}, "test.dbt_alfon_project.not_null_dim_movies_release_year.5f626c052f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "release_year", "model": "{{ get_where_subquery(ref('dim_movies')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_movies_release_year", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_movies_release_year.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_movies_release_year.5f626c052f", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_dim_movies_release_year"], "alias": "not_null_dim_movies_release_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2080872, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_movies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_movies"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "release_year", "file_key_name": "models.dim_movies", "attached_node": "model.dbt_alfon_project.dim_movies"}, "test.dbt_alfon_project.not_null_dim_date_date_key.881d0a31b6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_date_date_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_date_date_key.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_date_date_key.881d0a31b6", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_dim_date_date_key"], "alias": "not_null_dim_date_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.21016, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_date"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "date_key", "file_key_name": "models.dim_date", "attached_node": "model.dbt_alfon_project.dim_date"}, "test.dbt_alfon_project.unique_dim_date_date_key.0869fd48f9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_dim_date_date_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_dim_date_date_key.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.unique_dim_date_date_key.0869fd48f9", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "unique_dim_date_date_key"], "alias": "unique_dim_date_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2116463, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.dim_date"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "date_key", "file_key_name": "models.dim_date", "attached_node": "model.dbt_alfon_project.dim_date"}, "test.dbt_alfon_project.not_null_fact_user_activity_session_id.b1160c4b06": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('fact_user_activity')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_user_activity_session_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_user_activity_session_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_user_activity_session_id.b1160c4b06", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_user_activity_session_id"], "alias": "not_null_fact_user_activity_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2129657, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_user_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_user_activity"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "session_id", "file_key_name": "models.fact_user_activity", "attached_node": "model.dbt_alfon_project.fact_user_activity"}, "test.dbt_alfon_project.unique_fact_user_activity_session_id.83dce4702f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('fact_user_activity')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_fact_user_activity_session_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_fact_user_activity_session_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.unique_fact_user_activity_session_id.83dce4702f", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "unique_fact_user_activity_session_id"], "alias": "unique_fact_user_activity_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2145278, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_user_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.fact_user_activity"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "session_id", "file_key_name": "models.fact_user_activity", "attached_node": "model.dbt_alfon_project.fact_user_activity"}, "test.dbt_alfon_project.not_null_fact_user_activity_user_id.56fb1f5764": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('fact_user_activity')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_user_activity_user_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_user_activity_user_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_user_activity_user_id.56fb1f5764", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_user_activity_user_id"], "alias": "not_null_fact_user_activity_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2159626, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_user_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_user_activity"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.fact_user_activity", "attached_node": "model.dbt_alfon_project.fact_user_activity"}, "test.dbt_alfon_project.not_null_fact_user_activity_movie_id.dd47e41574": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "movie_id", "model": "{{ get_where_subquery(ref('fact_user_activity')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_user_activity_movie_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_user_activity_movie_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_user_activity_movie_id.dd47e41574", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_user_activity_movie_id"], "alias": "not_null_fact_user_activity_movie_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2182653, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_user_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_user_activity"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_id", "file_key_name": "models.fact_user_activity", "attached_node": "model.dbt_alfon_project.fact_user_activity"}, "test.dbt_alfon_project.not_null_fact_user_activity_date_key.4e48acbcb7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('fact_user_activity')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_user_activity_date_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_user_activity_date_key.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_user_activity_date_key.4e48acbcb7", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_user_activity_date_key"], "alias": "not_null_fact_user_activity_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.219628, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_user_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_user_activity"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "date_key", "file_key_name": "models.fact_user_activity", "attached_node": "model.dbt_alfon_project.fact_user_activity"}, "test.dbt_alfon_project.not_null_fact_movie_popularity_movie_id.6fb4c744de": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "movie_id", "model": "{{ get_where_subquery(ref('fact_movie_popularity')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_movie_popularity_movie_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_movie_popularity_movie_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_movie_popularity_movie_id.6fb4c744de", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_movie_popularity_movie_id"], "alias": "not_null_fact_movie_popularity_movie_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.221581, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_movie_popularity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_movie_popularity"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_id", "file_key_name": "models.fact_movie_popularity", "attached_node": "model.dbt_alfon_project.fact_movie_popularity"}, "test.dbt_alfon_project.not_null_fact_movie_popularity_date_key.e56d81d195": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('fact_movie_popularity')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_movie_popularity_date_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_movie_popularity_date_key.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_movie_popularity_date_key.e56d81d195", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_movie_popularity_date_key"], "alias": "not_null_fact_movie_popularity_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2233562, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_movie_popularity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_movie_popularity"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "date_key", "file_key_name": "models.fact_movie_popularity", "attached_node": "model.dbt_alfon_project.fact_movie_popularity"}, "test.dbt_alfon_project.not_null_fact_payments_payment_id.707bc26eed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('fact_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_payments_payment_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_payments_payment_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_payments_payment_id.707bc26eed", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_payments_payment_id"], "alias": "not_null_fact_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2259274, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.fact_payments", "attached_node": "model.dbt_alfon_project.fact_payments"}, "test.dbt_alfon_project.unique_fact_payments_payment_id.33c1a8aa61": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('fact_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_fact_payments_payment_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_fact_payments_payment_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.unique_fact_payments_payment_id.33c1a8aa61", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "unique_fact_payments_payment_id"], "alias": "unique_fact_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2275443, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.fact_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.fact_payments", "attached_node": "model.dbt_alfon_project.fact_payments"}, "test.dbt_alfon_project.not_null_fact_payments_user_id.f037c5beee": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('fact_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_payments_user_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_payments_user_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_payments_user_id.f037c5beee", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_payments_user_id"], "alias": "not_null_fact_payments_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2304506, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.fact_payments", "attached_node": "model.dbt_alfon_project.fact_payments"}, "test.dbt_alfon_project.not_null_fact_payments_subscription_id.636fea44b7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('fact_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_payments_subscription_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_payments_subscription_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_payments_subscription_id.636fea44b7", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_payments_subscription_id"], "alias": "not_null_fact_payments_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.232792, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.fact_payments", "attached_node": "model.dbt_alfon_project.fact_payments"}, "test.dbt_alfon_project.not_null_fact_payments_amount.b933a677cd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('fact_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_payments_amount", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_payments_amount.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_payments_amount.b933a677cd", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_payments_amount"], "alias": "not_null_fact_payments_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2355504, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "amount", "file_key_name": "models.fact_payments", "attached_node": "model.dbt_alfon_project.fact_payments"}, "test.dbt_alfon_project.not_null_fact_payments_payment_date.69c67555cf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_date", "model": "{{ get_where_subquery(ref('fact_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_payments_payment_date", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_payments_payment_date.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_payments_payment_date.69c67555cf", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_payments_payment_date"], "alias": "not_null_fact_payments_payment_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2375486, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "payment_date", "file_key_name": "models.fact_payments", "attached_node": "model.dbt_alfon_project.fact_payments"}, "test.dbt_alfon_project.not_null_fact_payments_date_key.32d2235fbf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('fact_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_payments_date_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_payments_date_key.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_payments_date_key.32d2235fbf", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_payments_date_key"], "alias": "not_null_fact_payments_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2390873, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "date_key", "file_key_name": "models.fact_payments", "attached_node": "model.dbt_alfon_project.fact_payments"}, "test.dbt_alfon_project.not_null_fact_ratings_rating_id.2286a71e17": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rating_id", "model": "{{ get_where_subquery(ref('fact_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_ratings_rating_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_ratings_rating_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_ratings_rating_id.2286a71e17", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_ratings_rating_id"], "alias": "not_null_fact_ratings_rating_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2403045, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "rating_id", "file_key_name": "models.fact_ratings", "attached_node": "model.dbt_alfon_project.fact_ratings"}, "test.dbt_alfon_project.unique_fact_ratings_rating_id.6cc98351c6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rating_id", "model": "{{ get_where_subquery(ref('fact_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_fact_ratings_rating_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_fact_ratings_rating_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.unique_fact_ratings_rating_id.6cc98351c6", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "unique_fact_ratings_rating_id"], "alias": "unique_fact_ratings_rating_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2416842, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.fact_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "rating_id", "file_key_name": "models.fact_ratings", "attached_node": "model.dbt_alfon_project.fact_ratings"}, "test.dbt_alfon_project.not_null_fact_ratings_user_id.7ba42cc51a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('fact_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_ratings_user_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_ratings_user_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_ratings_user_id.7ba42cc51a", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_ratings_user_id"], "alias": "not_null_fact_ratings_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2428923, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.fact_ratings", "attached_node": "model.dbt_alfon_project.fact_ratings"}, "test.dbt_alfon_project.not_null_fact_ratings_movie_id.f5c9a51642": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "movie_id", "model": "{{ get_where_subquery(ref('fact_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_ratings_movie_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_ratings_movie_id.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_ratings_movie_id.f5c9a51642", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_ratings_movie_id"], "alias": "not_null_fact_ratings_movie_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2442212, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_id", "file_key_name": "models.fact_ratings", "attached_node": "model.dbt_alfon_project.fact_ratings"}, "test.dbt_alfon_project.not_null_fact_ratings_rating_score.61d633ca4e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rating_score", "model": "{{ get_where_subquery(ref('fact_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_ratings_rating_score", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_ratings_rating_score.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_ratings_rating_score.61d633ca4e", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_ratings_rating_score"], "alias": "not_null_fact_ratings_rating_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.24536, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "rating_score", "file_key_name": "models.fact_ratings", "attached_node": "model.dbt_alfon_project.fact_ratings"}, "test.dbt_alfon_project.not_null_fact_ratings_rating_date.c464b78e56": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rating_date", "model": "{{ get_where_subquery(ref('fact_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_ratings_rating_date", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_ratings_rating_date.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_ratings_rating_date.c464b78e56", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_ratings_rating_date"], "alias": "not_null_fact_ratings_rating_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.246438, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "rating_date", "file_key_name": "models.fact_ratings", "attached_node": "model.dbt_alfon_project.fact_ratings"}, "test.dbt_alfon_project.not_null_fact_ratings_date_key.e5e0a8de5e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('fact_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_ratings_date_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_ratings_date_key.sql", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_ratings_date_key.e5e0a8de5e", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "not_null_fact_ratings_date_key"], "alias": "not_null_fact_ratings_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.24749, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "date_key", "file_key_name": "models.fact_ratings", "attached_node": "model.dbt_alfon_project.fact_ratings"}, "test.dbt_alfon_project.unique_prep_users_user_id.4cbed66b4e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('prep_users')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_prep_users_user_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_prep_users_user_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.unique_prep_users_user_id.4cbed66b4e", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "unique_prep_users_user_id"], "alias": "unique_prep_users_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2586255, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.prep_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.prep_users", "attached_node": "model.dbt_alfon_project.prep_users"}, "test.dbt_alfon_project.not_null_prep_users_user_id.394b415ec0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('prep_users')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_users_user_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_users_user_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_users_user_id.394b415ec0", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_users_user_id"], "alias": "not_null_prep_users_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2603896, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.prep_users", "attached_node": "model.dbt_alfon_project.prep_users"}, "test.dbt_alfon_project.unique_prep_users_email.1ebd82e0c9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "email", "model": "{{ get_where_subquery(ref('prep_users')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_prep_users_email", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_prep_users_email.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.unique_prep_users_email.1ebd82e0c9", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "unique_prep_users_email"], "alias": "unique_prep_users_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2616186, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.prep_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "email", "file_key_name": "models.prep_users", "attached_node": "model.dbt_alfon_project.prep_users"}, "test.dbt_alfon_project.not_null_prep_users_email.dbb5f01b82": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "email", "model": "{{ get_where_subquery(ref('prep_users')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_users_email", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_users_email.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_users_email.dbb5f01b82", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_users_email"], "alias": "not_null_prep_users_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2634506, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "email", "file_key_name": "models.prep_users", "attached_node": "model.dbt_alfon_project.prep_users"}, "test.dbt_alfon_project.not_null_prep_users_subscription_status.49076219ce": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_status", "model": "{{ get_where_subquery(ref('prep_users')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_users_subscription_status", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_users_subscription_status.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_users_subscription_status.49076219ce", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_users_subscription_status"], "alias": "not_null_prep_users_subscription_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2687, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "subscription_status", "file_key_name": "models.prep_users", "attached_node": "model.dbt_alfon_project.prep_users"}, "test.dbt_alfon_project.unique_prep_subscriptions_subscription_id.c8f6d8f017": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('prep_subscriptions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_prep_subscriptions_subscription_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_prep_subscriptions_subscription_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.unique_prep_subscriptions_subscription_id.c8f6d8f017", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "unique_prep_subscriptions_subscription_id"], "alias": "unique_prep_subscriptions_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.271483, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_subscriptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.prep_subscriptions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.prep_subscriptions", "attached_node": "model.dbt_alfon_project.prep_subscriptions"}, "test.dbt_alfon_project.not_null_prep_subscriptions_subscription_id.f1941bc04a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('prep_subscriptions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_subscriptions_subscription_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_subscriptions_subscription_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_subscriptions_subscription_id.f1941bc04a", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_subscriptions_subscription_id"], "alias": "not_null_prep_subscriptions_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.273775, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_subscriptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_subscriptions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.prep_subscriptions", "attached_node": "model.dbt_alfon_project.prep_subscriptions"}, "test.dbt_alfon_project.not_null_prep_subscriptions_user_id.1c94a7a0ad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('prep_subscriptions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_subscriptions_user_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_subscriptions_user_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_subscriptions_user_id.1c94a7a0ad", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_subscriptions_user_id"], "alias": "not_null_prep_subscriptions_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2751334, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_subscriptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_subscriptions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.prep_subscriptions", "attached_node": "model.dbt_alfon_project.prep_subscriptions"}, "test.dbt_alfon_project.relationships_prep_subscriptions_user_id__user_id__ref_prep_users_.c4fdfedeed": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('prep_users')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('prep_subscriptions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "relationships_prep_subscriptions_user_id__user_id__ref_prep_users_", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "relationships_prep_subscriptio_4e06c78d64bd2158a2541a0a6285e273.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.relationships_prep_subscriptions_user_id__user_id__ref_prep_users_.c4fdfedeed", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "relationships_prep_subscriptions_user_id__user_id__ref_prep_users_"], "alias": "relationships_prep_subscriptio_4e06c78d64bd2158a2541a0a6285e273", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_prep_subscriptio_4e06c78d64bd2158a2541a0a6285e273", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_prep_subscriptio_4e06c78d64bd2158a2541a0a6285e273"}, "created_at": 1761656593.2763777, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_prep_subscriptio_4e06c78d64bd2158a2541a0a6285e273\") }}", "language": "sql", "refs": [{"name": "prep_users", "package": null, "version": null}, {"name": "prep_subscriptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_alfon_project.prep_users", "model.dbt_alfon_project.prep_subscriptions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.prep_subscriptions", "attached_node": "model.dbt_alfon_project.prep_subscriptions"}, "test.dbt_alfon_project.not_null_prep_subscriptions_plan_type.d8cbbe6d07": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_type", "model": "{{ get_where_subquery(ref('prep_subscriptions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_subscriptions_plan_type", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_subscriptions_plan_type.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_subscriptions_plan_type.d8cbbe6d07", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_subscriptions_plan_type"], "alias": "not_null_prep_subscriptions_plan_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2844656, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_subscriptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_subscriptions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "plan_type", "file_key_name": "models.prep_subscriptions", "attached_node": "model.dbt_alfon_project.prep_subscriptions"}, "test.dbt_alfon_project.unique_prep_movies_movie_id.ef76cf94c6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "movie_id", "model": "{{ get_where_subquery(ref('prep_movies')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_prep_movies_movie_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_prep_movies_movie_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.unique_prep_movies_movie_id.ef76cf94c6", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "unique_prep_movies_movie_id"], "alias": "unique_prep_movies_movie_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.285998, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_movies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.prep_movies"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_id", "file_key_name": "models.prep_movies", "attached_node": "model.dbt_alfon_project.prep_movies"}, "test.dbt_alfon_project.not_null_prep_movies_movie_id.5581c34a61": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "movie_id", "model": "{{ get_where_subquery(ref('prep_movies')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_movies_movie_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_movies_movie_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_movies_movie_id.5581c34a61", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_movies_movie_id"], "alias": "not_null_prep_movies_movie_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2877305, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_movies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_movies"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_id", "file_key_name": "models.prep_movies", "attached_node": "model.dbt_alfon_project.prep_movies"}, "test.dbt_alfon_project.not_null_prep_movies_title.83e850ae04": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "title", "model": "{{ get_where_subquery(ref('prep_movies')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_movies_title", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_movies_title.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_movies_title.83e850ae04", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_movies_title"], "alias": "not_null_prep_movies_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.289032, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_movies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_movies"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "title", "file_key_name": "models.prep_movies", "attached_node": "model.dbt_alfon_project.prep_movies"}, "test.dbt_alfon_project.not_null_prep_movies_release_year.a919e5f2be": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "release_year", "model": "{{ get_where_subquery(ref('prep_movies')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_movies_release_year", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_movies_release_year.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_movies_release_year.a919e5f2be", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_movies_release_year"], "alias": "not_null_prep_movies_release_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2901492, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_movies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_movies"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "release_year", "file_key_name": "models.prep_movies", "attached_node": "model.dbt_alfon_project.prep_movies"}, "test.dbt_alfon_project.unique_prep_watch_sessions_session_id.77d2d56102": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('prep_watch_sessions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_prep_watch_sessions_session_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_prep_watch_sessions_session_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.unique_prep_watch_sessions_session_id.77d2d56102", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "unique_prep_watch_sessions_session_id"], "alias": "unique_prep_watch_sessions_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2913442, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_watch_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.prep_watch_sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "session_id", "file_key_name": "models.prep_watch_sessions", "attached_node": "model.dbt_alfon_project.prep_watch_sessions"}, "test.dbt_alfon_project.not_null_prep_watch_sessions_session_id.2e025165de": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('prep_watch_sessions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_watch_sessions_session_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_watch_sessions_session_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_watch_sessions_session_id.2e025165de", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_watch_sessions_session_id"], "alias": "not_null_prep_watch_sessions_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.2927265, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_watch_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_watch_sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "session_id", "file_key_name": "models.prep_watch_sessions", "attached_node": "model.dbt_alfon_project.prep_watch_sessions"}, "test.dbt_alfon_project.not_null_prep_watch_sessions_user_id.f64799a3f5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('prep_watch_sessions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_watch_sessions_user_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_watch_sessions_user_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_watch_sessions_user_id.f64799a3f5", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_watch_sessions_user_id"], "alias": "not_null_prep_watch_sessions_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.29381, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_watch_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_watch_sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.prep_watch_sessions", "attached_node": "model.dbt_alfon_project.prep_watch_sessions"}, "test.dbt_alfon_project.relationships_prep_watch_sessions_user_id__user_id__ref_prep_users_.23bf59c700": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('prep_users')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('prep_watch_sessions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "relationships_prep_watch_sessions_user_id__user_id__ref_prep_users_", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "relationships_prep_watch_sessi_3955d1ad4dddfa5498db203638403832.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.relationships_prep_watch_sessions_user_id__user_id__ref_prep_users_.23bf59c700", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "relationships_prep_watch_sessions_user_id__user_id__ref_prep_users_"], "alias": "relationships_prep_watch_sessi_3955d1ad4dddfa5498db203638403832", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_prep_watch_sessi_3955d1ad4dddfa5498db203638403832", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_prep_watch_sessi_3955d1ad4dddfa5498db203638403832"}, "created_at": 1761656593.2955744, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_prep_watch_sessi_3955d1ad4dddfa5498db203638403832\") }}", "language": "sql", "refs": [{"name": "prep_users", "package": null, "version": null}, {"name": "prep_watch_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_alfon_project.prep_users", "model.dbt_alfon_project.prep_watch_sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.prep_watch_sessions", "attached_node": "model.dbt_alfon_project.prep_watch_sessions"}, "test.dbt_alfon_project.not_null_prep_watch_sessions_movie_id.c5f80e8d74": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "movie_id", "model": "{{ get_where_subquery(ref('prep_watch_sessions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_watch_sessions_movie_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_watch_sessions_movie_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_watch_sessions_movie_id.c5f80e8d74", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_watch_sessions_movie_id"], "alias": "not_null_prep_watch_sessions_movie_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3008041, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_watch_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_watch_sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_id", "file_key_name": "models.prep_watch_sessions", "attached_node": "model.dbt_alfon_project.prep_watch_sessions"}, "test.dbt_alfon_project.relationships_prep_watch_sessions_movie_id__movie_id__ref_prep_movies_.52724b0e15": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('prep_movies')", "field": "movie_id", "column_name": "movie_id", "model": "{{ get_where_subquery(ref('prep_watch_sessions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "relationships_prep_watch_sessions_movie_id__movie_id__ref_prep_movies_", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "relationships_prep_watch_sessi_16be0591799f3237c2e54213e328a4ea.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.relationships_prep_watch_sessions_movie_id__movie_id__ref_prep_movies_.52724b0e15", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "relationships_prep_watch_sessions_movie_id__movie_id__ref_prep_movies_"], "alias": "relationships_prep_watch_sessi_16be0591799f3237c2e54213e328a4ea", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_prep_watch_sessi_16be0591799f3237c2e54213e328a4ea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_prep_watch_sessi_16be0591799f3237c2e54213e328a4ea"}, "created_at": 1761656593.3021955, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_prep_watch_sessi_16be0591799f3237c2e54213e328a4ea\") }}", "language": "sql", "refs": [{"name": "prep_movies", "package": null, "version": null}, {"name": "prep_watch_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_alfon_project.prep_movies", "model.dbt_alfon_project.prep_watch_sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_id", "file_key_name": "models.prep_watch_sessions", "attached_node": "model.dbt_alfon_project.prep_watch_sessions"}, "test.dbt_alfon_project.not_null_prep_watch_sessions_start_time.19953e8d75": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "start_time", "model": "{{ get_where_subquery(ref('prep_watch_sessions')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_watch_sessions_start_time", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_watch_sessions_start_time.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_watch_sessions_start_time.19953e8d75", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_watch_sessions_start_time"], "alias": "not_null_prep_watch_sessions_start_time", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.306554, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_watch_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_watch_sessions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "start_time", "file_key_name": "models.prep_watch_sessions", "attached_node": "model.dbt_alfon_project.prep_watch_sessions"}, "test.dbt_alfon_project.unique_prep_payments_payment_id.8ffa45bb00": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('prep_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_prep_payments_payment_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_prep_payments_payment_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.unique_prep_payments_payment_id.8ffa45bb00", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "unique_prep_payments_payment_id"], "alias": "unique_prep_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3080914, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.prep_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.prep_payments", "attached_node": "model.dbt_alfon_project.prep_payments"}, "test.dbt_alfon_project.not_null_prep_payments_payment_id.e52171cf1d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('prep_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_payments_payment_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_payments_payment_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_payments_payment_id.e52171cf1d", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_payments_payment_id"], "alias": "not_null_prep_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3110862, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.prep_payments", "attached_node": "model.dbt_alfon_project.prep_payments"}, "test.dbt_alfon_project.not_null_prep_payments_user_id.82e14e667d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('prep_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_payments_user_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_payments_user_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_payments_user_id.82e14e667d", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_payments_user_id"], "alias": "not_null_prep_payments_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3128734, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.prep_payments", "attached_node": "model.dbt_alfon_project.prep_payments"}, "test.dbt_alfon_project.relationships_prep_payments_user_id__user_id__ref_prep_users_.fd9a6a8d64": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('prep_users')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('prep_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "relationships_prep_payments_user_id__user_id__ref_prep_users_", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "relationships_prep_payments_user_id__user_id__ref_prep_users_.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.relationships_prep_payments_user_id__user_id__ref_prep_users_.fd9a6a8d64", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "relationships_prep_payments_user_id__user_id__ref_prep_users_"], "alias": "relationships_prep_payments_user_id__user_id__ref_prep_users_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3145213, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_users", "package": null, "version": null}, {"name": "prep_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_alfon_project.prep_users", "model.dbt_alfon_project.prep_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.prep_payments", "attached_node": "model.dbt_alfon_project.prep_payments"}, "test.dbt_alfon_project.not_null_prep_payments_subscription_id.88a2675a4a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('prep_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_payments_subscription_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_payments_subscription_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_payments_subscription_id.88a2675a4a", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_payments_subscription_id"], "alias": "not_null_prep_payments_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.319507, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.prep_payments", "attached_node": "model.dbt_alfon_project.prep_payments"}, "test.dbt_alfon_project.relationships_prep_payments_subscription_id__subscription_id__ref_prep_subscriptions_.06f01fe8a8": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('prep_subscriptions')", "field": "subscription_id", "column_name": "subscription_id", "model": "{{ get_where_subquery(ref('prep_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "relationships_prep_payments_subscription_id__subscription_id__ref_prep_subscriptions_", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "relationships_prep_payments_7536310fa010cde8af488d4dfff16491.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.relationships_prep_payments_subscription_id__subscription_id__ref_prep_subscriptions_.06f01fe8a8", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "relationships_prep_payments_subscription_id__subscription_id__ref_prep_subscriptions_"], "alias": "relationships_prep_payments_7536310fa010cde8af488d4dfff16491", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_prep_payments_7536310fa010cde8af488d4dfff16491", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_prep_payments_7536310fa010cde8af488d4dfff16491"}, "created_at": 1761656593.321393, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_prep_payments_7536310fa010cde8af488d4dfff16491\") }}", "language": "sql", "refs": [{"name": "prep_subscriptions", "package": null, "version": null}, {"name": "prep_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_alfon_project.prep_subscriptions", "model.dbt_alfon_project.prep_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.prep_payments", "attached_node": "model.dbt_alfon_project.prep_payments"}, "test.dbt_alfon_project.not_null_prep_payments_amount.47537c1e3e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('prep_payments')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_payments_amount", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_payments_amount.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_payments_amount.47537c1e3e", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_payments_amount"], "alias": "not_null_prep_payments_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3308647, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_payments"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "amount", "file_key_name": "models.prep_payments", "attached_node": "model.dbt_alfon_project.prep_payments"}, "test.dbt_alfon_project.unique_prep_ratings_rating_id.fb718a0e4e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rating_id", "model": "{{ get_where_subquery(ref('prep_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_prep_ratings_rating_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_prep_ratings_rating_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.unique_prep_ratings_rating_id.fb718a0e4e", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "unique_prep_ratings_rating_id"], "alias": "unique_prep_ratings_rating_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3326485, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.prep_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "rating_id", "file_key_name": "models.prep_ratings", "attached_node": "model.dbt_alfon_project.prep_ratings"}, "test.dbt_alfon_project.not_null_prep_ratings_rating_id.1b400bed17": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rating_id", "model": "{{ get_where_subquery(ref('prep_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_ratings_rating_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_ratings_rating_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_ratings_rating_id.1b400bed17", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_ratings_rating_id"], "alias": "not_null_prep_ratings_rating_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3342927, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "rating_id", "file_key_name": "models.prep_ratings", "attached_node": "model.dbt_alfon_project.prep_ratings"}, "test.dbt_alfon_project.not_null_prep_ratings_user_id.2a3a56f689": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('prep_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_ratings_user_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_ratings_user_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_ratings_user_id.2a3a56f689", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_ratings_user_id"], "alias": "not_null_prep_ratings_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3357267, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.prep_ratings", "attached_node": "model.dbt_alfon_project.prep_ratings"}, "test.dbt_alfon_project.relationships_prep_ratings_user_id__user_id__ref_prep_users_.089315c550": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('prep_users')", "field": "user_id", "column_name": "user_id", "model": "{{ get_where_subquery(ref('prep_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "relationships_prep_ratings_user_id__user_id__ref_prep_users_", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "relationships_prep_ratings_user_id__user_id__ref_prep_users_.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.relationships_prep_ratings_user_id__user_id__ref_prep_users_.089315c550", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "relationships_prep_ratings_user_id__user_id__ref_prep_users_"], "alias": "relationships_prep_ratings_user_id__user_id__ref_prep_users_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3379185, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_users", "package": null, "version": null}, {"name": "prep_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_alfon_project.prep_users", "model.dbt_alfon_project.prep_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "user_id", "file_key_name": "models.prep_ratings", "attached_node": "model.dbt_alfon_project.prep_ratings"}, "test.dbt_alfon_project.not_null_prep_ratings_movie_id.772360c57a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "movie_id", "model": "{{ get_where_subquery(ref('prep_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_ratings_movie_id", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_ratings_movie_id.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_ratings_movie_id.772360c57a", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_ratings_movie_id"], "alias": "not_null_prep_ratings_movie_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3461628, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_id", "file_key_name": "models.prep_ratings", "attached_node": "model.dbt_alfon_project.prep_ratings"}, "test.dbt_alfon_project.relationships_prep_ratings_movie_id__movie_id__ref_prep_movies_.d303eeff80": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('prep_movies')", "field": "movie_id", "column_name": "movie_id", "model": "{{ get_where_subquery(ref('prep_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "relationships_prep_ratings_movie_id__movie_id__ref_prep_movies_", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "relationships_prep_ratings_movie_id__movie_id__ref_prep_movies_.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.relationships_prep_ratings_movie_id__movie_id__ref_prep_movies_.d303eeff80", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "relationships_prep_ratings_movie_id__movie_id__ref_prep_movies_"], "alias": "relationships_prep_ratings_movie_id__movie_id__ref_prep_movies_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3509166, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_movies", "package": null, "version": null}, {"name": "prep_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_alfon_project.prep_movies", "model.dbt_alfon_project.prep_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "movie_id", "file_key_name": "models.prep_ratings", "attached_node": "model.dbt_alfon_project.prep_ratings"}, "test.dbt_alfon_project.not_null_prep_ratings_rating_score.3c16c53dbc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rating_score", "model": "{{ get_where_subquery(ref('prep_ratings')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_ratings_rating_score", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_ratings_rating_score.sql", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_ratings_rating_score.3c16c53dbc", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "not_null_prep_ratings_rating_score"], "alias": "not_null_prep_ratings_rating_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3582761, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_ratings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_ratings"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "rating_score", "file_key_name": "models.prep_ratings", "attached_node": "model.dbt_alfon_project.prep_ratings"}, "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_trip_date.1f95191e59": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_date", "model": "{{ get_where_subquery(ref('mart_taxi_trip_holiday_zone_flow')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_taxi_trip_holiday_zone_flow_trip_date", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_taxi_trip_holiday_zone_flow_trip_date.sql", "original_file_path": "models/taxi_trip/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_trip_date.1f95191e59", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "not_null_mart_taxi_trip_holiday_zone_flow_trip_date"], "alias": "not_null_mart_taxi_trip_holiday_zone_flow_trip_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3699481, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_zone_flow", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "trip_date", "file_key_name": "models.mart_taxi_trip_holiday_zone_flow", "attached_node": "model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"}, "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_trip_hour.4801931c12": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_hour", "model": "{{ get_where_subquery(ref('mart_taxi_trip_holiday_zone_flow')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_taxi_trip_holiday_zone_flow_trip_hour", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_taxi_trip_holiday_zone_flow_trip_hour.sql", "original_file_path": "models/taxi_trip/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_trip_hour.4801931c12", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "not_null_mart_taxi_trip_holiday_zone_flow_trip_hour"], "alias": "not_null_mart_taxi_trip_holiday_zone_flow_trip_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3718698, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_zone_flow", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "trip_hour", "file_key_name": "models.mart_taxi_trip_holiday_zone_flow", "attached_node": "model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"}, "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_pickup_zone.54940d4fb6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pickup_zone", "model": "{{ get_where_subquery(ref('mart_taxi_trip_holiday_zone_flow')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_taxi_trip_holiday_zone_flow_pickup_zone", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_taxi_trip_holiday_zone_flow_pickup_zone.sql", "original_file_path": "models/taxi_trip/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_pickup_zone.54940d4fb6", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "not_null_mart_taxi_trip_holiday_zone_flow_pickup_zone"], "alias": "not_null_mart_taxi_trip_holiday_zone_flow_pickup_zone", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.373321, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_zone_flow", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "pickup_zone", "file_key_name": "models.mart_taxi_trip_holiday_zone_flow", "attached_node": "model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"}, "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_dropoff_zone.f63b581450": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dropoff_zone", "model": "{{ get_where_subquery(ref('mart_taxi_trip_holiday_zone_flow')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_taxi_trip_holiday_zone_flow_dropoff_zone", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_taxi_trip_holiday_zone_flow_dropoff_zone.sql", "original_file_path": "models/taxi_trip/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_dropoff_zone.f63b581450", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "not_null_mart_taxi_trip_holiday_zone_flow_dropoff_zone"], "alias": "not_null_mart_taxi_trip_holiday_zone_flow_dropoff_zone", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.374833, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_zone_flow", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dropoff_zone", "file_key_name": "models.mart_taxi_trip_holiday_zone_flow", "attached_node": "model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"}, "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_total_trip.6f512bc8fc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_trip", "model": "{{ get_where_subquery(ref('mart_taxi_trip_holiday_zone_flow')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_taxi_trip_holiday_zone_flow_total_trip", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_taxi_trip_holiday_zone_flow_total_trip.sql", "original_file_path": "models/taxi_trip/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_total_trip.6f512bc8fc", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "not_null_mart_taxi_trip_holiday_zone_flow_total_trip"], "alias": "not_null_mart_taxi_trip_holiday_zone_flow_total_trip", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3761191, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_zone_flow", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "total_trip", "file_key_name": "models.mart_taxi_trip_holiday_zone_flow", "attached_node": "model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"}, "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_trip_hour.c7a1ff4da5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_hour", "model": "{{ get_where_subquery(ref('mart_taxi_trip_holiday_daily')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_taxi_trip_holiday_daily_trip_hour", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_taxi_trip_holiday_daily_trip_hour.sql", "original_file_path": "models/taxi_trip/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_trip_hour.c7a1ff4da5", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "not_null_mart_taxi_trip_holiday_daily_trip_hour"], "alias": "not_null_mart_taxi_trip_holiday_daily_trip_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3773031, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_daily"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "trip_hour", "file_key_name": "models.mart_taxi_trip_holiday_daily", "attached_node": "model.dbt_alfon_project.mart_taxi_trip_holiday_daily"}, "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_trip_date.d59f88293c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "trip_date", "model": "{{ get_where_subquery(ref('mart_taxi_trip_holiday_daily')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_taxi_trip_holiday_daily_trip_date", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_taxi_trip_holiday_daily_trip_date.sql", "original_file_path": "models/taxi_trip/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_trip_date.d59f88293c", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "not_null_mart_taxi_trip_holiday_daily_trip_date"], "alias": "not_null_mart_taxi_trip_holiday_daily_trip_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.378362, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_daily"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "trip_date", "file_key_name": "models.mart_taxi_trip_holiday_daily", "attached_node": "model.dbt_alfon_project.mart_taxi_trip_holiday_daily"}, "test.dbt_alfon_project.unique_mart_taxi_trip_holiday_daily_trip_date.9b02defbfd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "trip_date", "model": "{{ get_where_subquery(ref('mart_taxi_trip_holiday_daily')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_mart_taxi_trip_holiday_daily_trip_date", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_mart_taxi_trip_holiday_daily_trip_date.sql", "original_file_path": "models/taxi_trip/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.unique_mart_taxi_trip_holiday_daily_trip_date.9b02defbfd", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "unique_mart_taxi_trip_holiday_daily_trip_date"], "alias": "unique_mart_taxi_trip_holiday_daily_trip_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3794162, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_daily"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "trip_date", "file_key_name": "models.mart_taxi_trip_holiday_daily", "attached_node": "model.dbt_alfon_project.mart_taxi_trip_holiday_daily"}, "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_total_trip.f2c6f6a9bc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_trip", "model": "{{ get_where_subquery(ref('mart_taxi_trip_holiday_daily')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_taxi_trip_holiday_daily_total_trip", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_taxi_trip_holiday_daily_total_trip.sql", "original_file_path": "models/taxi_trip/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_total_trip.f2c6f6a9bc", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "not_null_mart_taxi_trip_holiday_daily_total_trip"], "alias": "not_null_mart_taxi_trip_holiday_daily_total_trip", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3806887, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_daily"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "total_trip", "file_key_name": "models.mart_taxi_trip_holiday_daily", "attached_node": "model.dbt_alfon_project.mart_taxi_trip_holiday_daily"}, "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_year.8af30500ef": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "year", "model": "{{ get_where_subquery(ref('mart_taxi_trip_holiday_summary')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_taxi_trip_holiday_summary_year", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_taxi_trip_holiday_summary_year.sql", "original_file_path": "models/taxi_trip/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_year.8af30500ef", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "not_null_mart_taxi_trip_holiday_summary_year"], "alias": "not_null_mart_taxi_trip_holiday_summary_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3822577, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_summary"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "year", "file_key_name": "models.mart_taxi_trip_holiday_summary", "attached_node": "model.dbt_alfon_project.mart_taxi_trip_holiday_summary"}, "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_month.ff1cd255d5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month", "model": "{{ get_where_subquery(ref('mart_taxi_trip_holiday_summary')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_taxi_trip_holiday_summary_month", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_taxi_trip_holiday_summary_month.sql", "original_file_path": "models/taxi_trip/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_month.ff1cd255d5", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "not_null_mart_taxi_trip_holiday_summary_month"], "alias": "not_null_mart_taxi_trip_holiday_summary_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3837454, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_summary"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "month", "file_key_name": "models.mart_taxi_trip_holiday_summary", "attached_node": "model.dbt_alfon_project.mart_taxi_trip_holiday_summary"}, "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_holiday_type.88585f8788": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "holiday_type", "model": "{{ get_where_subquery(ref('mart_taxi_trip_holiday_summary')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_taxi_trip_holiday_summary_holiday_type", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_taxi_trip_holiday_summary_holiday_type.sql", "original_file_path": "models/taxi_trip/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_holiday_type.88585f8788", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "not_null_mart_taxi_trip_holiday_summary_holiday_type"], "alias": "not_null_mart_taxi_trip_holiday_summary_holiday_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3850534, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_summary"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "holiday_type", "file_key_name": "models.mart_taxi_trip_holiday_summary", "attached_node": "model.dbt_alfon_project.mart_taxi_trip_holiday_summary"}, "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_total_trip.0e898d6a86": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_trip", "model": "{{ get_where_subquery(ref('mart_taxi_trip_holiday_summary')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_mart_taxi_trip_holiday_summary_total_trip", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_mart_taxi_trip_holiday_summary_total_trip.sql", "original_file_path": "models/taxi_trip/mart/mart_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_total_trip.0e898d6a86", "fqn": ["dbt_alfon_project", "taxi_trip", "mart", "not_null_mart_taxi_trip_holiday_summary_total_trip"], "alias": "not_null_mart_taxi_trip_holiday_summary_total_trip", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3862422, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_taxi_trip_holiday_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.mart_taxi_trip_holiday_summary"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "total_trip", "file_key_name": "models.mart_taxi_trip_holiday_summary", "attached_node": "model.dbt_alfon_project.mart_taxi_trip_holiday_summary"}, "test.dbt_alfon_project.not_null_fact_taxi_trip_md5_key.4302dd62c5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "md5_key", "model": "{{ get_where_subquery(ref('fact_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_taxi_trip_md5_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_taxi_trip_md5_key.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_taxi_trip_md5_key.4302dd62c5", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "not_null_fact_taxi_trip_md5_key"], "alias": "not_null_fact_taxi_trip_md5_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3984723, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "md5_key", "file_key_name": "models.fact_taxi_trip", "attached_node": "model.dbt_alfon_project.fact_taxi_trip"}, "test.dbt_alfon_project.unique_fact_taxi_trip_md5_key.89fafee60c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "md5_key", "model": "{{ get_where_subquery(ref('fact_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_fact_taxi_trip_md5_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_fact_taxi_trip_md5_key.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.unique_fact_taxi_trip_md5_key.89fafee60c", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "unique_fact_taxi_trip_md5_key"], "alias": "unique_fact_taxi_trip_md5_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.3998837, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.fact_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "md5_key", "file_key_name": "models.fact_taxi_trip", "attached_node": "model.dbt_alfon_project.fact_taxi_trip"}, "test.dbt_alfon_project.not_null_fact_taxi_trip_taxi_type.ca416114dc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "taxi_type", "model": "{{ get_where_subquery(ref('fact_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_taxi_trip_taxi_type", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_taxi_trip_taxi_type.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_taxi_trip_taxi_type.ca416114dc", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "not_null_fact_taxi_trip_taxi_type"], "alias": "not_null_fact_taxi_trip_taxi_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4035153, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "taxi_type", "file_key_name": "models.fact_taxi_trip", "attached_node": "model.dbt_alfon_project.fact_taxi_trip"}, "test.dbt_alfon_project.not_null_fact_taxi_trip_pickup_datetime.0e4bc79f52": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pickup_datetime", "model": "{{ get_where_subquery(ref('fact_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_taxi_trip_pickup_datetime", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_taxi_trip_pickup_datetime.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_taxi_trip_pickup_datetime.0e4bc79f52", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "not_null_fact_taxi_trip_pickup_datetime"], "alias": "not_null_fact_taxi_trip_pickup_datetime", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4054298, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "pickup_datetime", "file_key_name": "models.fact_taxi_trip", "attached_node": "model.dbt_alfon_project.fact_taxi_trip"}, "test.dbt_alfon_project.not_null_fact_taxi_trip_pulocationid.062022cf40": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pulocationid", "model": "{{ get_where_subquery(ref('fact_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_taxi_trip_pulocationid", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_taxi_trip_pulocationid.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_taxi_trip_pulocationid.062022cf40", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "not_null_fact_taxi_trip_pulocationid"], "alias": "not_null_fact_taxi_trip_pulocationid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4070807, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "pulocationid", "file_key_name": "models.fact_taxi_trip", "attached_node": "model.dbt_alfon_project.fact_taxi_trip"}, "test.dbt_alfon_project.relationships_fact_taxi_trip_pulocationid__locationid__ref_dim_location_.d45166ecc2": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_location')", "field": "locationid", "column_name": "pulocationid", "model": "{{ get_where_subquery(ref('fact_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "relationships_fact_taxi_trip_pulocationid__locationid__ref_dim_location_", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "relationships_fact_taxi_trip_c56b99afad15b9c459dfd3720dc8887d.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.relationships_fact_taxi_trip_pulocationid__locationid__ref_dim_location_.d45166ecc2", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "relationships_fact_taxi_trip_pulocationid__locationid__ref_dim_location_"], "alias": "relationships_fact_taxi_trip_c56b99afad15b9c459dfd3720dc8887d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_taxi_trip_c56b99afad15b9c459dfd3720dc8887d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_taxi_trip_c56b99afad15b9c459dfd3720dc8887d"}, "created_at": 1761656593.4086888, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_taxi_trip_c56b99afad15b9c459dfd3720dc8887d\") }}", "language": "sql", "refs": [{"name": "dim_location", "package": null, "version": null}, {"name": "fact_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_alfon_project.dim_location", "model.dbt_alfon_project.fact_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "pulocationid", "file_key_name": "models.fact_taxi_trip", "attached_node": "model.dbt_alfon_project.fact_taxi_trip"}, "test.dbt_alfon_project.not_null_fact_taxi_trip_dolocationid.50580ab298": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dolocationid", "model": "{{ get_where_subquery(ref('fact_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_fact_taxi_trip_dolocationid", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_fact_taxi_trip_dolocationid.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_fact_taxi_trip_dolocationid.50580ab298", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "not_null_fact_taxi_trip_dolocationid"], "alias": "not_null_fact_taxi_trip_dolocationid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4133868, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.fact_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dolocationid", "file_key_name": "models.fact_taxi_trip", "attached_node": "model.dbt_alfon_project.fact_taxi_trip"}, "test.dbt_alfon_project.relationships_fact_taxi_trip_dolocationid__locationid__ref_dim_location_.bc8d056cb2": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_location')", "field": "locationid", "column_name": "dolocationid", "model": "{{ get_where_subquery(ref('fact_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "relationships_fact_taxi_trip_dolocationid__locationid__ref_dim_location_", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "relationships_fact_taxi_trip_81e2e5ad9e5e4e93383434a1a554c94c.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.relationships_fact_taxi_trip_dolocationid__locationid__ref_dim_location_.bc8d056cb2", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "relationships_fact_taxi_trip_dolocationid__locationid__ref_dim_location_"], "alias": "relationships_fact_taxi_trip_81e2e5ad9e5e4e93383434a1a554c94c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_taxi_trip_81e2e5ad9e5e4e93383434a1a554c94c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_taxi_trip_81e2e5ad9e5e4e93383434a1a554c94c"}, "created_at": 1761656593.4147706, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_taxi_trip_81e2e5ad9e5e4e93383434a1a554c94c\") }}", "language": "sql", "refs": [{"name": "dim_location", "package": null, "version": null}, {"name": "fact_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_alfon_project.dim_location", "model.dbt_alfon_project.fact_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dolocationid", "file_key_name": "models.fact_taxi_trip", "attached_node": "model.dbt_alfon_project.fact_taxi_trip"}, "test.dbt_alfon_project.relationships_fact_taxi_trip_payment_type__payment_type__ref_dim_payment_type_.cfaca12491": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_payment_type')", "field": "payment_type", "column_name": "payment_type", "model": "{{ get_where_subquery(ref('fact_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "relationships_fact_taxi_trip_payment_type__payment_type__ref_dim_payment_type_", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "relationships_fact_taxi_trip_c371c777f91bfc97fa2f608cd3ef9939.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.relationships_fact_taxi_trip_payment_type__payment_type__ref_dim_payment_type_.cfaca12491", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "relationships_fact_taxi_trip_payment_type__payment_type__ref_dim_payment_type_"], "alias": "relationships_fact_taxi_trip_c371c777f91bfc97fa2f608cd3ef9939", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_taxi_trip_c371c777f91bfc97fa2f608cd3ef9939", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_taxi_trip_c371c777f91bfc97fa2f608cd3ef9939"}, "created_at": 1761656593.419298, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_taxi_trip_c371c777f91bfc97fa2f608cd3ef9939\") }}", "language": "sql", "refs": [{"name": "dim_payment_type", "package": null, "version": null}, {"name": "fact_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_alfon_project.dim_payment_type", "model.dbt_alfon_project.fact_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "payment_type", "file_key_name": "models.fact_taxi_trip", "attached_node": "model.dbt_alfon_project.fact_taxi_trip"}, "test.dbt_alfon_project.not_null_dim_payment_type_payment_type.fc8226f626": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_type", "model": "{{ get_where_subquery(ref('dim_payment_type')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_payment_type_payment_type", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_payment_type_payment_type.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_payment_type_payment_type.fc8226f626", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "not_null_dim_payment_type_payment_type"], "alias": "not_null_dim_payment_type_payment_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.423783, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_payment_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_payment_type"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "payment_type", "file_key_name": "models.dim_payment_type", "attached_node": "model.dbt_alfon_project.dim_payment_type"}, "test.dbt_alfon_project.unique_dim_payment_type_payment_type.6b71c22d58": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_type", "model": "{{ get_where_subquery(ref('dim_payment_type')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_dim_payment_type_payment_type", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_dim_payment_type_payment_type.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.unique_dim_payment_type_payment_type.6b71c22d58", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "unique_dim_payment_type_payment_type"], "alias": "unique_dim_payment_type_payment_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4253547, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_payment_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.dim_payment_type"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "payment_type", "file_key_name": "models.dim_payment_type", "attached_node": "model.dbt_alfon_project.dim_payment_type"}, "test.dbt_alfon_project.not_null_dim_location_locationid.3f26f68eea": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "locationid", "model": "{{ get_where_subquery(ref('dim_location')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_location_locationid", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_location_locationid.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_location_locationid.3f26f68eea", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "not_null_dim_location_locationid"], "alias": "not_null_dim_location_locationid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.426522, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_location"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "locationid", "file_key_name": "models.dim_location", "attached_node": "model.dbt_alfon_project.dim_location"}, "test.dbt_alfon_project.unique_dim_location_locationid.2cf6ff6ca8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "locationid", "model": "{{ get_where_subquery(ref('dim_location')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_dim_location_locationid", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_dim_location_locationid.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.unique_dim_location_locationid.2cf6ff6ca8", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "unique_dim_location_locationid"], "alias": "unique_dim_location_locationid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.427879, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_location", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.dim_location"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "locationid", "file_key_name": "models.dim_location", "attached_node": "model.dbt_alfon_project.dim_location"}, "test.dbt_alfon_project.not_null_dim_holiday_date.1278ae4009": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_holiday')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_holiday_date", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_holiday_date.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_holiday_date.1278ae4009", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "not_null_dim_holiday_date"], "alias": "not_null_dim_holiday_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4291947, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_holiday", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_holiday"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "date", "file_key_name": "models.dim_holiday", "attached_node": "model.dbt_alfon_project.dim_holiday"}, "test.dbt_alfon_project.not_null_dim_holiday_holiday_type.99f1309194": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "holiday_type", "model": "{{ get_where_subquery(ref('dim_holiday')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_holiday_holiday_type", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_holiday_holiday_type.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_holiday_holiday_type.99f1309194", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "not_null_dim_holiday_holiday_type"], "alias": "not_null_dim_holiday_holiday_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4304228, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_holiday", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_holiday"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "holiday_type", "file_key_name": "models.dim_holiday", "attached_node": "model.dbt_alfon_project.dim_holiday"}, "test.dbt_alfon_project.not_null_dim_holiday_hour.cbab79b5e8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hour", "model": "{{ get_where_subquery(ref('dim_holiday')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_holiday_hour", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_holiday_hour.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_holiday_hour.cbab79b5e8", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "not_null_dim_holiday_hour"], "alias": "not_null_dim_holiday_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.43161, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_holiday", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_holiday"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "hour", "file_key_name": "models.dim_holiday", "attached_node": "model.dbt_alfon_project.dim_holiday"}, "test.dbt_alfon_project.not_null_dim_holiday_holiday_hour.8ab91b0b78": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "holiday_hour", "model": "{{ get_where_subquery(ref('dim_holiday')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_dim_holiday_holiday_hour", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_dim_holiday_holiday_hour.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_dim_holiday_holiday_hour.8ab91b0b78", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "not_null_dim_holiday_holiday_hour"], "alias": "not_null_dim_holiday_holiday_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4328666, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_holiday", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.dim_holiday"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "holiday_hour", "file_key_name": "models.dim_holiday", "attached_node": "model.dbt_alfon_project.dim_holiday"}, "test.dbt_alfon_project.unique_dim_holiday_holiday_hour.4d72c3e362": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "holiday_hour", "model": "{{ get_where_subquery(ref('dim_holiday')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_dim_holiday_holiday_hour", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_dim_holiday_holiday_hour.sql", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "test.dbt_alfon_project.unique_dim_holiday_holiday_hour.4d72c3e362", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "unique_dim_holiday_holiday_hour"], "alias": "unique_dim_holiday_holiday_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4343016, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_holiday", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.dim_holiday"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "holiday_hour", "file_key_name": "models.dim_holiday", "attached_node": "model.dbt_alfon_project.dim_holiday"}, "test.dbt_alfon_project.not_null_prep_taxi_trip_md5_key.795652e05c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "md5_key", "model": "{{ get_where_subquery(ref('prep_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_taxi_trip_md5_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_taxi_trip_md5_key.sql", "original_file_path": "models/taxi_trip/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_taxi_trip_md5_key.795652e05c", "fqn": ["dbt_alfon_project", "taxi_trip", "preparation", "not_null_prep_taxi_trip_md5_key"], "alias": "not_null_prep_taxi_trip_md5_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4409797, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "md5_key", "file_key_name": "models.prep_taxi_trip", "attached_node": "model.dbt_alfon_project.prep_taxi_trip"}, "test.dbt_alfon_project.unique_prep_taxi_trip_md5_key.581a440d29": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "md5_key", "model": "{{ get_where_subquery(ref('prep_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "unique_prep_taxi_trip_md5_key", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "unique_prep_taxi_trip_md5_key.sql", "original_file_path": "models/taxi_trip/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.unique_prep_taxi_trip_md5_key.581a440d29", "fqn": ["dbt_alfon_project", "taxi_trip", "preparation", "unique_prep_taxi_trip_md5_key"], "alias": "unique_prep_taxi_trip_md5_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4427981, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_alfon_project.prep_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "md5_key", "file_key_name": "models.prep_taxi_trip", "attached_node": "model.dbt_alfon_project.prep_taxi_trip"}, "test.dbt_alfon_project.not_null_prep_taxi_trip_pickup_datetime.6d64cd99ed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pickup_datetime", "model": "{{ get_where_subquery(ref('prep_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_taxi_trip_pickup_datetime", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_taxi_trip_pickup_datetime.sql", "original_file_path": "models/taxi_trip/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_taxi_trip_pickup_datetime.6d64cd99ed", "fqn": ["dbt_alfon_project", "taxi_trip", "preparation", "not_null_prep_taxi_trip_pickup_datetime"], "alias": "not_null_prep_taxi_trip_pickup_datetime", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4448347, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "pickup_datetime", "file_key_name": "models.prep_taxi_trip", "attached_node": "model.dbt_alfon_project.prep_taxi_trip"}, "test.dbt_alfon_project.not_null_prep_taxi_trip_dropoff_datetime.ce5b9109bd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dropoff_datetime", "model": "{{ get_where_subquery(ref('prep_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_taxi_trip_dropoff_datetime", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_taxi_trip_dropoff_datetime.sql", "original_file_path": "models/taxi_trip/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_taxi_trip_dropoff_datetime.ce5b9109bd", "fqn": ["dbt_alfon_project", "taxi_trip", "preparation", "not_null_prep_taxi_trip_dropoff_datetime"], "alias": "not_null_prep_taxi_trip_dropoff_datetime", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4462602, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dropoff_datetime", "file_key_name": "models.prep_taxi_trip", "attached_node": "model.dbt_alfon_project.prep_taxi_trip"}, "test.dbt_alfon_project.not_null_prep_taxi_trip_pulocationid.7890f905c9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pulocationid", "model": "{{ get_where_subquery(ref('prep_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_taxi_trip_pulocationid", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_taxi_trip_pulocationid.sql", "original_file_path": "models/taxi_trip/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_taxi_trip_pulocationid.7890f905c9", "fqn": ["dbt_alfon_project", "taxi_trip", "preparation", "not_null_prep_taxi_trip_pulocationid"], "alias": "not_null_prep_taxi_trip_pulocationid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4478316, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "pulocationid", "file_key_name": "models.prep_taxi_trip", "attached_node": "model.dbt_alfon_project.prep_taxi_trip"}, "test.dbt_alfon_project.not_null_prep_taxi_trip_dolocationid.afabc95e1d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dolocationid", "model": "{{ get_where_subquery(ref('prep_taxi_trip')) }}"}, "namespace": null}, "database": "purwadika", "schema": "dbt_test__audit", "name": "not_null_prep_taxi_trip_dolocationid", "resource_type": "test", "package_name": "dbt_alfon_project", "path": "not_null_prep_taxi_trip_dolocationid.sql", "original_file_path": "models/taxi_trip/preparation/prep_schema.yml", "unique_id": "test.dbt_alfon_project.not_null_prep_taxi_trip_dolocationid.afabc95e1d", "fqn": ["dbt_alfon_project", "taxi_trip", "preparation", "not_null_prep_taxi_trip_dolocationid"], "alias": "not_null_prep_taxi_trip_dolocationid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1761656593.4491792, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "prep_taxi_trip", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_alfon_project.prep_taxi_trip"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dolocationid", "file_key_name": "models.prep_taxi_trip", "attached_node": "model.dbt_alfon_project.prep_taxi_trip"}}, "sources": {"source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_payments": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_model", "name": "fact_payments", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/mart/mart_schema.yml", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_payments", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "jcdeol004_alfon_movie_streaming_model", "fact_payments"], "source_name": "jcdeol004_alfon_movie_streaming_model", "source_description": "", "loader": "", "identifier": "fact_payments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_model`.`fact_payments`", "created_at": 1761656593.4522023}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_ratings": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_model", "name": "fact_ratings", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/mart/mart_schema.yml", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_ratings", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "jcdeol004_alfon_movie_streaming_model", "fact_ratings"], "source_name": "jcdeol004_alfon_movie_streaming_model", "source_description": "", "loader": "", "identifier": "fact_ratings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_model`.`fact_ratings`", "created_at": 1761656593.452377}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_movie_popularity": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_model", "name": "fact_movie_popularity", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/mart/mart_schema.yml", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_movie_popularity", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "jcdeol004_alfon_movie_streaming_model", "fact_movie_popularity"], "source_name": "jcdeol004_alfon_movie_streaming_model", "source_description": "", "loader": "", "identifier": "fact_movie_popularity", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_model`.`fact_movie_popularity`", "created_at": 1761656593.4524727}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_user_activity": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_model", "name": "fact_user_activity", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/mart/mart_schema.yml", "original_file_path": "models/movie_streaming/mart/mart_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_user_activity", "fqn": ["dbt_alfon_project", "movie_streaming", "mart", "jcdeol004_alfon_movie_streaming_model", "fact_user_activity"], "source_name": "jcdeol004_alfon_movie_streaming_model", "source_description": "", "loader": "", "identifier": "fact_user_activity", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_model`.`fact_user_activity`", "created_at": 1761656593.452561}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_users": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_preparation", "name": "prep_users", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/model/model_schema.yml", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_users", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "jcdeol004_alfon_movie_streaming_preparation", "prep_users"], "source_name": "jcdeol004_alfon_movie_streaming_preparation", "source_description": "", "loader": "", "identifier": "prep_users", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_preparation`.`prep_users`", "created_at": 1761656593.4526465}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_subscriptions": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_preparation", "name": "prep_subscriptions", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/model/model_schema.yml", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_subscriptions", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "jcdeol004_alfon_movie_streaming_preparation", "prep_subscriptions"], "source_name": "jcdeol004_alfon_movie_streaming_preparation", "source_description": "", "loader": "", "identifier": "prep_subscriptions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_preparation`.`prep_subscriptions`", "created_at": 1761656593.452728}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_movies": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_preparation", "name": "prep_movies", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/model/model_schema.yml", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_movies", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "jcdeol004_alfon_movie_streaming_preparation", "prep_movies"], "source_name": "jcdeol004_alfon_movie_streaming_preparation", "source_description": "", "loader": "", "identifier": "prep_movies", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_preparation`.`prep_movies`", "created_at": 1761656593.452806}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_watch_sessions": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_preparation", "name": "prep_watch_sessions", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/model/model_schema.yml", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_watch_sessions", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "jcdeol004_alfon_movie_streaming_preparation", "prep_watch_sessions"], "source_name": "jcdeol004_alfon_movie_streaming_preparation", "source_description": "", "loader": "", "identifier": "prep_watch_sessions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_preparation`.`prep_watch_sessions`", "created_at": 1761656593.452891}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_payments": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_preparation", "name": "prep_payments", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/model/model_schema.yml", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_payments", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "jcdeol004_alfon_movie_streaming_preparation", "prep_payments"], "source_name": "jcdeol004_alfon_movie_streaming_preparation", "source_description": "", "loader": "", "identifier": "prep_payments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_preparation`.`prep_payments`", "created_at": 1761656593.4529705}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_ratings": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_preparation", "name": "prep_ratings", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/model/model_schema.yml", "original_file_path": "models/movie_streaming/model/model_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_ratings", "fqn": ["dbt_alfon_project", "movie_streaming", "model", "jcdeol004_alfon_movie_streaming_preparation", "prep_ratings"], "source_name": "jcdeol004_alfon_movie_streaming_preparation", "source_description": "", "loader": "", "identifier": "prep_ratings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_preparation`.`prep_ratings`", "created_at": 1761656593.4530468}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_users": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_raw", "name": "raw_users", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/preparation/prep_schema.yml", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_users", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "jcdeol004_alfon_movie_streaming_raw", "raw_users"], "source_name": "jcdeol004_alfon_movie_streaming_raw", "source_description": "", "loader": "", "identifier": "raw_users", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_raw`.`raw_users`", "created_at": 1761656593.4531238}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_subscriptions": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_raw", "name": "raw_subscriptions", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/preparation/prep_schema.yml", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_subscriptions", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "jcdeol004_alfon_movie_streaming_raw", "raw_subscriptions"], "source_name": "jcdeol004_alfon_movie_streaming_raw", "source_description": "", "loader": "", "identifier": "raw_subscriptions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_raw`.`raw_subscriptions`", "created_at": 1761656593.4531968}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_movies": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_raw", "name": "raw_movies", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/preparation/prep_schema.yml", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_movies", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "jcdeol004_alfon_movie_streaming_raw", "raw_movies"], "source_name": "jcdeol004_alfon_movie_streaming_raw", "source_description": "", "loader": "", "identifier": "raw_movies", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_raw`.`raw_movies`", "created_at": 1761656593.453269}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_watch_sessions": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_raw", "name": "raw_watch_sessions", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/preparation/prep_schema.yml", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_watch_sessions", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "jcdeol004_alfon_movie_streaming_raw", "raw_watch_sessions"], "source_name": "jcdeol004_alfon_movie_streaming_raw", "source_description": "", "loader": "", "identifier": "raw_watch_sessions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_raw`.`raw_watch_sessions`", "created_at": 1761656593.4533422}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_payments": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_raw", "name": "raw_payments", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/preparation/prep_schema.yml", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_payments", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "jcdeol004_alfon_movie_streaming_raw", "raw_payments"], "source_name": "jcdeol004_alfon_movie_streaming_raw", "source_description": "", "loader": "", "identifier": "raw_payments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_raw`.`raw_payments`", "created_at": 1761656593.4534147}, "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_ratings": {"database": "purwadika", "schema": "jcdeol004_alfon_movie_streaming_raw", "name": "raw_ratings", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/movie_streaming/preparation/prep_schema.yml", "original_file_path": "models/movie_streaming/preparation/prep_schema.yml", "unique_id": "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_ratings", "fqn": ["dbt_alfon_project", "movie_streaming", "preparation", "jcdeol004_alfon_movie_streaming_raw", "raw_ratings"], "source_name": "jcdeol004_alfon_movie_streaming_raw", "source_description": "", "loader": "", "identifier": "raw_ratings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_movie_streaming_raw`.`raw_ratings`", "created_at": 1761656593.4534836}, "source.dbt_alfon_project.taxi_zone.raw_taxi_zone": {"database": "purwadika", "schema": "jcdeol004_alfon_taxi_trip_raw", "name": "raw_taxi_zone", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/taxi_trip/model/model_schema.yml", "original_file_path": "models/taxi_trip/model/model_schema.yml", "unique_id": "source.dbt_alfon_project.taxi_zone.raw_taxi_zone", "fqn": ["dbt_alfon_project", "taxi_trip", "model", "taxi_zone", "raw_taxi_zone"], "source_name": "taxi_zone", "source_description": "", "loader": "", "identifier": "raw_taxi_zone", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw taxi zone lookup table from NYC TLC", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_taxi_trip_raw`.`raw_taxi_zone`", "created_at": 1761656593.453554}, "source.dbt_alfon_project.taxi_trip_raw.raw_yellow_taxi_trip": {"database": "purwadika", "schema": "jcdeol004_alfon_taxi_trip_raw", "name": "raw_yellow_taxi_trip", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/taxi_trip/preparation/prep_schema.yml", "original_file_path": "models/taxi_trip/preparation/prep_schema.yml", "unique_id": "source.dbt_alfon_project.taxi_trip_raw.raw_yellow_taxi_trip", "fqn": ["dbt_alfon_project", "taxi_trip", "preparation", "taxi_trip_raw", "raw_yellow_taxi_trip"], "source_name": "taxi_trip_raw", "source_description": "", "loader": "", "identifier": "raw_yellow_taxi_trip", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw Yellow Taxi trip data loaded from NYC TLC source", "columns": {"pulocationid": {"name": "pulocationid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dolocationid": {"name": "dolocationid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_taxi_trip_raw`.`raw_yellow_taxi_trip`", "created_at": 1761656593.4536524}, "source.dbt_alfon_project.taxi_trip_raw.raw_green_taxi_trip": {"database": "purwadika", "schema": "jcdeol004_alfon_taxi_trip_raw", "name": "raw_green_taxi_trip", "resource_type": "source", "package_name": "dbt_alfon_project", "path": "models/taxi_trip/preparation/prep_schema.yml", "original_file_path": "models/taxi_trip/preparation/prep_schema.yml", "unique_id": "source.dbt_alfon_project.taxi_trip_raw.raw_green_taxi_trip", "fqn": ["dbt_alfon_project", "taxi_trip", "preparation", "taxi_trip_raw", "raw_green_taxi_trip"], "source_name": "taxi_trip_raw", "source_description": "", "loader": "", "identifier": "raw_green_taxi_trip", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw Green Taxi trip data loaded from NYC TLC source", "columns": {"pulocationid": {"name": "pulocationid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dolocationid": {"name": "dolocationid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`purwadika`.`jcdeol004_alfon_taxi_trip_raw`.`raw_green_taxi_trip`", "created_at": 1761656593.4537444}}, "macros": {"macro.dbt_alfon_project.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt_alfon_project", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "unique_id": "macro.dbt_alfon_project.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n    {%- if custom_schema_name is not none -%}\r\n        {{ custom_schema_name | trim }}\r\n    {%- else -%}\r\n        {{ target.schema }}\r\n    {%- endif -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.377625, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3832252, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3836782, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3841498, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3844326, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3863797, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.386703, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3886933, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3898077, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3903284, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.390638, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3908846, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3910983, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3914177, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.391792, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.392225, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3924186, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.392905, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3933573, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3941305, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3943377, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3946502, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3951669, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3955057, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.3962133, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.402903, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4033911, "supported_languages": null}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.406624, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4070501, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.40827, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.409122, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4136448, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.415038, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.41886, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4194102, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.419985, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4201922, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4203706, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4218364, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4235537, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4245996, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4251568, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4263842, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4268901, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4270911, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4283507, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4315329, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4340944, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.434992, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4367855, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4377027, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4390774, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4411428, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4416776, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.442028, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.443757, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4442859, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4448323, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4454913, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.445747, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4459975, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4463363, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4464543, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.44663, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.447108, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4473977, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4476073, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.447804, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4478905, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4480503, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4482543, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.448489, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4487514, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4492836, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4494667, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4499207, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.450169, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.45086, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.451072, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4512725, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4522285, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4530842, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.453299, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.453849, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.454088, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4558957, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4578214, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4593227, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.459776, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4623194, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4652753, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4666297, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4702973, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4708, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.472471, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.473199, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4740143, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4748442, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4750042, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.47693, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4773438, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4777167, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4779582, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4781766, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4788623, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4792724, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.479669, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4804716, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4808936, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4875371, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4887547, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4898193, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4919643, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4926062, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.492985, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4952297, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.4968872, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5031629, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5082033, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5099285, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.511128, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5114505, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5129757, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5136082, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5143661, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.517128, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.517821, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5184996, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.519776, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5206838, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5209606, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5216498, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.521965, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5278773, "supported_languages": ["sql"]}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.538228, "supported_languages": ["sql"]}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5453143, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.547122, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.547436, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5485559, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5488489, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5495174, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5502195, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.551284, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5515692, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5517898, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5521505, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5523756, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.552677, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5528667, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.553124, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5533118, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5534663, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5537603, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5557919, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5565028, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5576868, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5580547, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5593402, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5666063, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5684009, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5700588, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.571174, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.571706, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5718732, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5725062, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5727255, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.573062, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5732088, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5737462, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5739732, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5745282, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.574755, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5799923, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.580537, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.580845, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5824175, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5826898, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5833523, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5850215, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5913432, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5918083, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5920844, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5925195, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.592688, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.592895, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5933275, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5941868, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5944078, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5949113, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5957222, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5963995, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.596624, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.5968301, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6004734, "supported_languages": ["sql"]}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6036086, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6038768, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6049762, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6052878, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.60547, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6070907, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6076016, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.607983, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6084688, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6088068, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6111917, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6116838, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.612229, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6172907, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.61823, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6184738, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6190217, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.619217, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6193569, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6195035, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6196644, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6198304, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6200306, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6205251, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6207447, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6220381, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6270008, "supported_languages": ["sql"]}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6276705, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6278358, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6280465, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6281657, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6283293, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.628444, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6286132, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.628778, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6302972, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6308181, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6310532, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6312325, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6314063, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6316516, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6318464, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.632318, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6324992, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6326573, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6333523, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.63353, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6337283, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6339266, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6342003, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.634702, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.636402, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6365323, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6367173, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6369734, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6376536, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6380515, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6382563, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6386797, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6389472, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.639264, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6395285, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.639807, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6408148, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.641019, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6412804, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.641506, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.642678, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.645034, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6452074, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6455283, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.645751, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6459785, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6461904, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.647163, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6475525, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6478045, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6482546, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6484818, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6490538, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6493018, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6502926, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.651032, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6512504, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6514149, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.651745, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6524668, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.652945, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6531615, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6533244, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6535053, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6543977, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6549292, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6551137, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.65557, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.655756, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6558945, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6561608, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6563132, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6598632, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6602628, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6605418, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.660892, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6611557, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6615465, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6617918, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6620038, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.662222, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.663266, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6640344, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6662364, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6667092, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.666903, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6671839, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6684823, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6691408, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6693838, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6695147, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.669712, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6700206, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6702633, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.670385, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6708503, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6713045, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6718903, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.672304, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6726356, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6730509, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6733062, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6737323, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.674143, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6747231, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6750746, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6753712, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.675617, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.675839, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6760063, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.67631, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6764534, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.676702, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.676816, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6771653, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6774108, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.677825, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6779652, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6781893, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.678279, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6789494, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6791737, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6797307, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6801927, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6805637, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.680764, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6811075, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6812959, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6817644, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.68198, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.682278, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6824179, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6827087, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.682835, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6831217, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.683264, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6840148, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6844673, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6847763, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.684962, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6854956, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6857235, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.685987, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6863039, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6864562, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6867867, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.686967, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6873083, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6878479, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6881897, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.688325, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6892326, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.689523, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6896992, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6898596, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.690028, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6901846, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6903539, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6905365, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.690712, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.690875, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6910462, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6912413, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.691425, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6915858, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6919289, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.692084, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6924782, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6927838, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6929507, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.693836, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6943216, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6948035, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1761656592.6951373, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_alfon_project.mart_movie_popularity_monthly": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_movie_popularity"], "model.dbt_alfon_project.mart_movie_rating_monthly": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_ratings"], "model.dbt_alfon_project.mart_subscription_revenue_monthly": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_payments"], "model.dbt_alfon_project.mart_user_activity_monthly": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_user_activity"], "model.dbt_alfon_project.dim_date": [], "model.dbt_alfon_project.dim_movies": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_movies"], "model.dbt_alfon_project.dim_subscriptions": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_subscriptions"], "model.dbt_alfon_project.dim_users": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_subscriptions", "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_users"], "model.dbt_alfon_project.fact_movie_popularity": ["model.dbt_alfon_project.fact_user_activity"], "model.dbt_alfon_project.fact_payments": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_payments"], "model.dbt_alfon_project.fact_ratings": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_ratings"], "model.dbt_alfon_project.fact_user_activity": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_watch_sessions"], "model.dbt_alfon_project.prep_movies": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_movies"], "model.dbt_alfon_project.prep_payments": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_payments"], "model.dbt_alfon_project.prep_ratings": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_ratings"], "model.dbt_alfon_project.prep_subscriptions": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_subscriptions"], "model.dbt_alfon_project.prep_users": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_users"], "model.dbt_alfon_project.prep_watch_sessions": ["source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_watch_sessions"], "model.dbt_alfon_project.mart_taxi_trip_holiday_daily": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"], "model.dbt_alfon_project.mart_taxi_trip_holiday_summary": ["model.dbt_alfon_project.dim_holiday", "model.dbt_alfon_project.mart_taxi_trip_holiday_daily"], "model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow": ["model.dbt_alfon_project.dim_holiday", "model.dbt_alfon_project.dim_location", "model.dbt_alfon_project.fact_taxi_trip"], "model.dbt_alfon_project.dim_holiday": [], "model.dbt_alfon_project.dim_location": ["source.dbt_alfon_project.taxi_zone.raw_taxi_zone"], "model.dbt_alfon_project.dim_payment_type": [], "model.dbt_alfon_project.fact_taxi_trip": ["model.dbt_alfon_project.prep_taxi_trip"], "model.dbt_alfon_project.prep_taxi_trip": ["source.dbt_alfon_project.taxi_trip_raw.raw_green_taxi_trip", "source.dbt_alfon_project.taxi_trip_raw.raw_yellow_taxi_trip"], "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_movie_id.15eb004770": ["model.dbt_alfon_project.mart_movie_popularity_monthly"], "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_month_key.47e509fbde": ["model.dbt_alfon_project.mart_movie_popularity_monthly"], "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_movie_month_key.1a00591e3d": ["model.dbt_alfon_project.mart_movie_popularity_monthly"], "test.dbt_alfon_project.unique_mart_movie_popularity_monthly_movie_month_key.6ae24ba573": ["model.dbt_alfon_project.mart_movie_popularity_monthly"], "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_movie_id.e86c6ea5e8": ["model.dbt_alfon_project.mart_movie_rating_monthly"], "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_month_key.6110cdcd83": ["model.dbt_alfon_project.mart_movie_rating_monthly"], "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_movie_month_key.c090141aef": ["model.dbt_alfon_project.mart_movie_rating_monthly"], "test.dbt_alfon_project.unique_mart_movie_rating_monthly_movie_month_key.546b490e5a": ["model.dbt_alfon_project.mart_movie_rating_monthly"], "test.dbt_alfon_project.not_null_mart_user_activity_monthly_user_id.af27035a1c": ["model.dbt_alfon_project.mart_user_activity_monthly"], "test.dbt_alfon_project.not_null_mart_user_activity_monthly_month_key.0dd3c3f659": ["model.dbt_alfon_project.mart_user_activity_monthly"], "test.dbt_alfon_project.not_null_mart_user_activity_monthly_user_month_key.f7e031972b": ["model.dbt_alfon_project.mart_user_activity_monthly"], "test.dbt_alfon_project.unique_mart_user_activity_monthly_user_month_key.38a5e52f95": ["model.dbt_alfon_project.mart_user_activity_monthly"], "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_subscription_id.42831f320a": ["model.dbt_alfon_project.mart_subscription_revenue_monthly"], "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_month_key.3fe417258d": ["model.dbt_alfon_project.mart_subscription_revenue_monthly"], "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_subscription_month_key.c7de84fded": ["model.dbt_alfon_project.mart_subscription_revenue_monthly"], "test.dbt_alfon_project.unique_mart_subscription_revenue_monthly_subscription_month_key.2aabea2a29": ["model.dbt_alfon_project.mart_subscription_revenue_monthly"], "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_run_date_bq.814b57db4b": ["model.dbt_alfon_project.mart_subscription_revenue_monthly"], "test.dbt_alfon_project.not_null_dim_users_user_id.e754bb5812": ["model.dbt_alfon_project.dim_users"], "test.dbt_alfon_project.unique_dim_users_user_id.bcdc17b9f9": ["model.dbt_alfon_project.dim_users"], "test.dbt_alfon_project.not_null_dim_users_name.ff1cc66807": ["model.dbt_alfon_project.dim_users"], "test.dbt_alfon_project.not_null_dim_users_email.f41c7984c2": ["model.dbt_alfon_project.dim_users"], "test.dbt_alfon_project.unique_dim_users_email.53417c09f1": ["model.dbt_alfon_project.dim_users"], "test.dbt_alfon_project.not_null_dim_users_country.b6217b23ba": ["model.dbt_alfon_project.dim_users"], "test.dbt_alfon_project.not_null_dim_users_join_date.635d96312d": ["model.dbt_alfon_project.dim_users"], "test.dbt_alfon_project.not_null_dim_subscriptions_subscription_id.593212df68": ["model.dbt_alfon_project.dim_subscriptions"], "test.dbt_alfon_project.unique_dim_subscriptions_subscription_id.aab39a989d": ["model.dbt_alfon_project.dim_subscriptions"], "test.dbt_alfon_project.not_null_dim_subscriptions_plan_type.ebd4738bae": ["model.dbt_alfon_project.dim_subscriptions"], "test.dbt_alfon_project.not_null_dim_subscriptions_start_date.b35dad5f3d": ["model.dbt_alfon_project.dim_subscriptions"], "test.dbt_alfon_project.not_null_dim_subscriptions_status.64f3eb029e": ["model.dbt_alfon_project.dim_subscriptions"], "test.dbt_alfon_project.not_null_dim_movies_movie_id.0f96ca970d": ["model.dbt_alfon_project.dim_movies"], "test.dbt_alfon_project.unique_dim_movies_movie_id.2e7fb7860b": ["model.dbt_alfon_project.dim_movies"], "test.dbt_alfon_project.not_null_dim_movies_title.e533d1bb2e": ["model.dbt_alfon_project.dim_movies"], "test.dbt_alfon_project.not_null_dim_movies_release_year.5f626c052f": ["model.dbt_alfon_project.dim_movies"], "test.dbt_alfon_project.not_null_dim_date_date_key.881d0a31b6": ["model.dbt_alfon_project.dim_date"], "test.dbt_alfon_project.unique_dim_date_date_key.0869fd48f9": ["model.dbt_alfon_project.dim_date"], "test.dbt_alfon_project.not_null_fact_user_activity_session_id.b1160c4b06": ["model.dbt_alfon_project.fact_user_activity"], "test.dbt_alfon_project.unique_fact_user_activity_session_id.83dce4702f": ["model.dbt_alfon_project.fact_user_activity"], "test.dbt_alfon_project.not_null_fact_user_activity_user_id.56fb1f5764": ["model.dbt_alfon_project.fact_user_activity"], "test.dbt_alfon_project.not_null_fact_user_activity_movie_id.dd47e41574": ["model.dbt_alfon_project.fact_user_activity"], "test.dbt_alfon_project.not_null_fact_user_activity_date_key.4e48acbcb7": ["model.dbt_alfon_project.fact_user_activity"], "test.dbt_alfon_project.not_null_fact_movie_popularity_movie_id.6fb4c744de": ["model.dbt_alfon_project.fact_movie_popularity"], "test.dbt_alfon_project.not_null_fact_movie_popularity_date_key.e56d81d195": ["model.dbt_alfon_project.fact_movie_popularity"], "test.dbt_alfon_project.not_null_fact_payments_payment_id.707bc26eed": ["model.dbt_alfon_project.fact_payments"], "test.dbt_alfon_project.unique_fact_payments_payment_id.33c1a8aa61": ["model.dbt_alfon_project.fact_payments"], "test.dbt_alfon_project.not_null_fact_payments_user_id.f037c5beee": ["model.dbt_alfon_project.fact_payments"], "test.dbt_alfon_project.not_null_fact_payments_subscription_id.636fea44b7": ["model.dbt_alfon_project.fact_payments"], "test.dbt_alfon_project.not_null_fact_payments_amount.b933a677cd": ["model.dbt_alfon_project.fact_payments"], "test.dbt_alfon_project.not_null_fact_payments_payment_date.69c67555cf": ["model.dbt_alfon_project.fact_payments"], "test.dbt_alfon_project.not_null_fact_payments_date_key.32d2235fbf": ["model.dbt_alfon_project.fact_payments"], "test.dbt_alfon_project.not_null_fact_ratings_rating_id.2286a71e17": ["model.dbt_alfon_project.fact_ratings"], "test.dbt_alfon_project.unique_fact_ratings_rating_id.6cc98351c6": ["model.dbt_alfon_project.fact_ratings"], "test.dbt_alfon_project.not_null_fact_ratings_user_id.7ba42cc51a": ["model.dbt_alfon_project.fact_ratings"], "test.dbt_alfon_project.not_null_fact_ratings_movie_id.f5c9a51642": ["model.dbt_alfon_project.fact_ratings"], "test.dbt_alfon_project.not_null_fact_ratings_rating_score.61d633ca4e": ["model.dbt_alfon_project.fact_ratings"], "test.dbt_alfon_project.not_null_fact_ratings_rating_date.c464b78e56": ["model.dbt_alfon_project.fact_ratings"], "test.dbt_alfon_project.not_null_fact_ratings_date_key.e5e0a8de5e": ["model.dbt_alfon_project.fact_ratings"], "test.dbt_alfon_project.unique_prep_users_user_id.4cbed66b4e": ["model.dbt_alfon_project.prep_users"], "test.dbt_alfon_project.not_null_prep_users_user_id.394b415ec0": ["model.dbt_alfon_project.prep_users"], "test.dbt_alfon_project.unique_prep_users_email.1ebd82e0c9": ["model.dbt_alfon_project.prep_users"], "test.dbt_alfon_project.not_null_prep_users_email.dbb5f01b82": ["model.dbt_alfon_project.prep_users"], "test.dbt_alfon_project.not_null_prep_users_subscription_status.49076219ce": ["model.dbt_alfon_project.prep_users"], "test.dbt_alfon_project.unique_prep_subscriptions_subscription_id.c8f6d8f017": ["model.dbt_alfon_project.prep_subscriptions"], "test.dbt_alfon_project.not_null_prep_subscriptions_subscription_id.f1941bc04a": ["model.dbt_alfon_project.prep_subscriptions"], "test.dbt_alfon_project.not_null_prep_subscriptions_user_id.1c94a7a0ad": ["model.dbt_alfon_project.prep_subscriptions"], "test.dbt_alfon_project.relationships_prep_subscriptions_user_id__user_id__ref_prep_users_.c4fdfedeed": ["model.dbt_alfon_project.prep_subscriptions", "model.dbt_alfon_project.prep_users"], "test.dbt_alfon_project.not_null_prep_subscriptions_plan_type.d8cbbe6d07": ["model.dbt_alfon_project.prep_subscriptions"], "test.dbt_alfon_project.unique_prep_movies_movie_id.ef76cf94c6": ["model.dbt_alfon_project.prep_movies"], "test.dbt_alfon_project.not_null_prep_movies_movie_id.5581c34a61": ["model.dbt_alfon_project.prep_movies"], "test.dbt_alfon_project.not_null_prep_movies_title.83e850ae04": ["model.dbt_alfon_project.prep_movies"], "test.dbt_alfon_project.not_null_prep_movies_release_year.a919e5f2be": ["model.dbt_alfon_project.prep_movies"], "test.dbt_alfon_project.unique_prep_watch_sessions_session_id.77d2d56102": ["model.dbt_alfon_project.prep_watch_sessions"], "test.dbt_alfon_project.not_null_prep_watch_sessions_session_id.2e025165de": ["model.dbt_alfon_project.prep_watch_sessions"], "test.dbt_alfon_project.not_null_prep_watch_sessions_user_id.f64799a3f5": ["model.dbt_alfon_project.prep_watch_sessions"], "test.dbt_alfon_project.relationships_prep_watch_sessions_user_id__user_id__ref_prep_users_.23bf59c700": ["model.dbt_alfon_project.prep_users", "model.dbt_alfon_project.prep_watch_sessions"], "test.dbt_alfon_project.not_null_prep_watch_sessions_movie_id.c5f80e8d74": ["model.dbt_alfon_project.prep_watch_sessions"], "test.dbt_alfon_project.relationships_prep_watch_sessions_movie_id__movie_id__ref_prep_movies_.52724b0e15": ["model.dbt_alfon_project.prep_movies", "model.dbt_alfon_project.prep_watch_sessions"], "test.dbt_alfon_project.not_null_prep_watch_sessions_start_time.19953e8d75": ["model.dbt_alfon_project.prep_watch_sessions"], "test.dbt_alfon_project.unique_prep_payments_payment_id.8ffa45bb00": ["model.dbt_alfon_project.prep_payments"], "test.dbt_alfon_project.not_null_prep_payments_payment_id.e52171cf1d": ["model.dbt_alfon_project.prep_payments"], "test.dbt_alfon_project.not_null_prep_payments_user_id.82e14e667d": ["model.dbt_alfon_project.prep_payments"], "test.dbt_alfon_project.relationships_prep_payments_user_id__user_id__ref_prep_users_.fd9a6a8d64": ["model.dbt_alfon_project.prep_payments", "model.dbt_alfon_project.prep_users"], "test.dbt_alfon_project.not_null_prep_payments_subscription_id.88a2675a4a": ["model.dbt_alfon_project.prep_payments"], "test.dbt_alfon_project.relationships_prep_payments_subscription_id__subscription_id__ref_prep_subscriptions_.06f01fe8a8": ["model.dbt_alfon_project.prep_payments", "model.dbt_alfon_project.prep_subscriptions"], "test.dbt_alfon_project.not_null_prep_payments_amount.47537c1e3e": ["model.dbt_alfon_project.prep_payments"], "test.dbt_alfon_project.unique_prep_ratings_rating_id.fb718a0e4e": ["model.dbt_alfon_project.prep_ratings"], "test.dbt_alfon_project.not_null_prep_ratings_rating_id.1b400bed17": ["model.dbt_alfon_project.prep_ratings"], "test.dbt_alfon_project.not_null_prep_ratings_user_id.2a3a56f689": ["model.dbt_alfon_project.prep_ratings"], "test.dbt_alfon_project.relationships_prep_ratings_user_id__user_id__ref_prep_users_.089315c550": ["model.dbt_alfon_project.prep_ratings", "model.dbt_alfon_project.prep_users"], "test.dbt_alfon_project.not_null_prep_ratings_movie_id.772360c57a": ["model.dbt_alfon_project.prep_ratings"], "test.dbt_alfon_project.relationships_prep_ratings_movie_id__movie_id__ref_prep_movies_.d303eeff80": ["model.dbt_alfon_project.prep_movies", "model.dbt_alfon_project.prep_ratings"], "test.dbt_alfon_project.not_null_prep_ratings_rating_score.3c16c53dbc": ["model.dbt_alfon_project.prep_ratings"], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_trip_date.1f95191e59": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_trip_hour.4801931c12": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_pickup_zone.54940d4fb6": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_dropoff_zone.f63b581450": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_total_trip.6f512bc8fc": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow"], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_trip_hour.c7a1ff4da5": ["model.dbt_alfon_project.mart_taxi_trip_holiday_daily"], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_trip_date.d59f88293c": ["model.dbt_alfon_project.mart_taxi_trip_holiday_daily"], "test.dbt_alfon_project.unique_mart_taxi_trip_holiday_daily_trip_date.9b02defbfd": ["model.dbt_alfon_project.mart_taxi_trip_holiday_daily"], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_total_trip.f2c6f6a9bc": ["model.dbt_alfon_project.mart_taxi_trip_holiday_daily"], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_year.8af30500ef": ["model.dbt_alfon_project.mart_taxi_trip_holiday_summary"], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_month.ff1cd255d5": ["model.dbt_alfon_project.mart_taxi_trip_holiday_summary"], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_holiday_type.88585f8788": ["model.dbt_alfon_project.mart_taxi_trip_holiday_summary"], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_total_trip.0e898d6a86": ["model.dbt_alfon_project.mart_taxi_trip_holiday_summary"], "test.dbt_alfon_project.not_null_fact_taxi_trip_md5_key.4302dd62c5": ["model.dbt_alfon_project.fact_taxi_trip"], "test.dbt_alfon_project.unique_fact_taxi_trip_md5_key.89fafee60c": ["model.dbt_alfon_project.fact_taxi_trip"], "test.dbt_alfon_project.not_null_fact_taxi_trip_taxi_type.ca416114dc": ["model.dbt_alfon_project.fact_taxi_trip"], "test.dbt_alfon_project.not_null_fact_taxi_trip_pickup_datetime.0e4bc79f52": ["model.dbt_alfon_project.fact_taxi_trip"], "test.dbt_alfon_project.not_null_fact_taxi_trip_pulocationid.062022cf40": ["model.dbt_alfon_project.fact_taxi_trip"], "test.dbt_alfon_project.relationships_fact_taxi_trip_pulocationid__locationid__ref_dim_location_.d45166ecc2": ["model.dbt_alfon_project.dim_location", "model.dbt_alfon_project.fact_taxi_trip"], "test.dbt_alfon_project.not_null_fact_taxi_trip_dolocationid.50580ab298": ["model.dbt_alfon_project.fact_taxi_trip"], "test.dbt_alfon_project.relationships_fact_taxi_trip_dolocationid__locationid__ref_dim_location_.bc8d056cb2": ["model.dbt_alfon_project.dim_location", "model.dbt_alfon_project.fact_taxi_trip"], "test.dbt_alfon_project.relationships_fact_taxi_trip_payment_type__payment_type__ref_dim_payment_type_.cfaca12491": ["model.dbt_alfon_project.dim_payment_type", "model.dbt_alfon_project.fact_taxi_trip"], "test.dbt_alfon_project.not_null_dim_payment_type_payment_type.fc8226f626": ["model.dbt_alfon_project.dim_payment_type"], "test.dbt_alfon_project.unique_dim_payment_type_payment_type.6b71c22d58": ["model.dbt_alfon_project.dim_payment_type"], "test.dbt_alfon_project.not_null_dim_location_locationid.3f26f68eea": ["model.dbt_alfon_project.dim_location"], "test.dbt_alfon_project.unique_dim_location_locationid.2cf6ff6ca8": ["model.dbt_alfon_project.dim_location"], "test.dbt_alfon_project.not_null_dim_holiday_date.1278ae4009": ["model.dbt_alfon_project.dim_holiday"], "test.dbt_alfon_project.not_null_dim_holiday_holiday_type.99f1309194": ["model.dbt_alfon_project.dim_holiday"], "test.dbt_alfon_project.not_null_dim_holiday_hour.cbab79b5e8": ["model.dbt_alfon_project.dim_holiday"], "test.dbt_alfon_project.not_null_dim_holiday_holiday_hour.8ab91b0b78": ["model.dbt_alfon_project.dim_holiday"], "test.dbt_alfon_project.unique_dim_holiday_holiday_hour.4d72c3e362": ["model.dbt_alfon_project.dim_holiday"], "test.dbt_alfon_project.not_null_prep_taxi_trip_md5_key.795652e05c": ["model.dbt_alfon_project.prep_taxi_trip"], "test.dbt_alfon_project.unique_prep_taxi_trip_md5_key.581a440d29": ["model.dbt_alfon_project.prep_taxi_trip"], "test.dbt_alfon_project.not_null_prep_taxi_trip_pickup_datetime.6d64cd99ed": ["model.dbt_alfon_project.prep_taxi_trip"], "test.dbt_alfon_project.not_null_prep_taxi_trip_dropoff_datetime.ce5b9109bd": ["model.dbt_alfon_project.prep_taxi_trip"], "test.dbt_alfon_project.not_null_prep_taxi_trip_pulocationid.7890f905c9": ["model.dbt_alfon_project.prep_taxi_trip"], "test.dbt_alfon_project.not_null_prep_taxi_trip_dolocationid.afabc95e1d": ["model.dbt_alfon_project.prep_taxi_trip"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_payments": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_ratings": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_movie_popularity": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_user_activity": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_users": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_subscriptions": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_movies": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_watch_sessions": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_payments": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_ratings": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_users": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_subscriptions": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_movies": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_watch_sessions": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_payments": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_ratings": [], "source.dbt_alfon_project.taxi_zone.raw_taxi_zone": [], "source.dbt_alfon_project.taxi_trip_raw.raw_yellow_taxi_trip": [], "source.dbt_alfon_project.taxi_trip_raw.raw_green_taxi_trip": []}, "child_map": {"model.dbt_alfon_project.mart_movie_popularity_monthly": ["test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_month_key.47e509fbde", "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_movie_id.15eb004770", "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_movie_month_key.1a00591e3d", "test.dbt_alfon_project.unique_mart_movie_popularity_monthly_movie_month_key.6ae24ba573"], "model.dbt_alfon_project.mart_movie_rating_monthly": ["test.dbt_alfon_project.not_null_mart_movie_rating_monthly_month_key.6110cdcd83", "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_movie_id.e86c6ea5e8", "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_movie_month_key.c090141aef", "test.dbt_alfon_project.unique_mart_movie_rating_monthly_movie_month_key.546b490e5a"], "model.dbt_alfon_project.mart_subscription_revenue_monthly": ["test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_month_key.3fe417258d", "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_run_date_bq.814b57db4b", "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_subscription_id.42831f320a", "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_subscription_month_key.c7de84fded", "test.dbt_alfon_project.unique_mart_subscription_revenue_monthly_subscription_month_key.2aabea2a29"], "model.dbt_alfon_project.mart_user_activity_monthly": ["test.dbt_alfon_project.not_null_mart_user_activity_monthly_month_key.0dd3c3f659", "test.dbt_alfon_project.not_null_mart_user_activity_monthly_user_id.af27035a1c", "test.dbt_alfon_project.not_null_mart_user_activity_monthly_user_month_key.f7e031972b", "test.dbt_alfon_project.unique_mart_user_activity_monthly_user_month_key.38a5e52f95"], "model.dbt_alfon_project.dim_date": ["test.dbt_alfon_project.not_null_dim_date_date_key.881d0a31b6", "test.dbt_alfon_project.unique_dim_date_date_key.0869fd48f9"], "model.dbt_alfon_project.dim_movies": ["test.dbt_alfon_project.not_null_dim_movies_movie_id.0f96ca970d", "test.dbt_alfon_project.not_null_dim_movies_release_year.5f626c052f", "test.dbt_alfon_project.not_null_dim_movies_title.e533d1bb2e", "test.dbt_alfon_project.unique_dim_movies_movie_id.2e7fb7860b"], "model.dbt_alfon_project.dim_subscriptions": ["test.dbt_alfon_project.not_null_dim_subscriptions_plan_type.ebd4738bae", "test.dbt_alfon_project.not_null_dim_subscriptions_start_date.b35dad5f3d", "test.dbt_alfon_project.not_null_dim_subscriptions_status.64f3eb029e", "test.dbt_alfon_project.not_null_dim_subscriptions_subscription_id.593212df68", "test.dbt_alfon_project.unique_dim_subscriptions_subscription_id.aab39a989d"], "model.dbt_alfon_project.dim_users": ["test.dbt_alfon_project.not_null_dim_users_country.b6217b23ba", "test.dbt_alfon_project.not_null_dim_users_email.f41c7984c2", "test.dbt_alfon_project.not_null_dim_users_join_date.635d96312d", "test.dbt_alfon_project.not_null_dim_users_name.ff1cc66807", "test.dbt_alfon_project.not_null_dim_users_user_id.e754bb5812", "test.dbt_alfon_project.unique_dim_users_email.53417c09f1", "test.dbt_alfon_project.unique_dim_users_user_id.bcdc17b9f9"], "model.dbt_alfon_project.fact_movie_popularity": ["test.dbt_alfon_project.not_null_fact_movie_popularity_date_key.e56d81d195", "test.dbt_alfon_project.not_null_fact_movie_popularity_movie_id.6fb4c744de"], "model.dbt_alfon_project.fact_payments": ["test.dbt_alfon_project.not_null_fact_payments_amount.b933a677cd", "test.dbt_alfon_project.not_null_fact_payments_date_key.32d2235fbf", "test.dbt_alfon_project.not_null_fact_payments_payment_date.69c67555cf", "test.dbt_alfon_project.not_null_fact_payments_payment_id.707bc26eed", "test.dbt_alfon_project.not_null_fact_payments_subscription_id.636fea44b7", "test.dbt_alfon_project.not_null_fact_payments_user_id.f037c5beee", "test.dbt_alfon_project.unique_fact_payments_payment_id.33c1a8aa61"], "model.dbt_alfon_project.fact_ratings": ["test.dbt_alfon_project.not_null_fact_ratings_date_key.e5e0a8de5e", "test.dbt_alfon_project.not_null_fact_ratings_movie_id.f5c9a51642", "test.dbt_alfon_project.not_null_fact_ratings_rating_date.c464b78e56", "test.dbt_alfon_project.not_null_fact_ratings_rating_id.2286a71e17", "test.dbt_alfon_project.not_null_fact_ratings_rating_score.61d633ca4e", "test.dbt_alfon_project.not_null_fact_ratings_user_id.7ba42cc51a", "test.dbt_alfon_project.unique_fact_ratings_rating_id.6cc98351c6"], "model.dbt_alfon_project.fact_user_activity": ["model.dbt_alfon_project.fact_movie_popularity", "test.dbt_alfon_project.not_null_fact_user_activity_date_key.4e48acbcb7", "test.dbt_alfon_project.not_null_fact_user_activity_movie_id.dd47e41574", "test.dbt_alfon_project.not_null_fact_user_activity_session_id.b1160c4b06", "test.dbt_alfon_project.not_null_fact_user_activity_user_id.56fb1f5764", "test.dbt_alfon_project.unique_fact_user_activity_session_id.83dce4702f"], "model.dbt_alfon_project.prep_movies": ["test.dbt_alfon_project.not_null_prep_movies_movie_id.5581c34a61", "test.dbt_alfon_project.not_null_prep_movies_release_year.a919e5f2be", "test.dbt_alfon_project.not_null_prep_movies_title.83e850ae04", "test.dbt_alfon_project.relationships_prep_ratings_movie_id__movie_id__ref_prep_movies_.d303eeff80", "test.dbt_alfon_project.relationships_prep_watch_sessions_movie_id__movie_id__ref_prep_movies_.52724b0e15", "test.dbt_alfon_project.unique_prep_movies_movie_id.ef76cf94c6"], "model.dbt_alfon_project.prep_payments": ["test.dbt_alfon_project.not_null_prep_payments_amount.47537c1e3e", "test.dbt_alfon_project.not_null_prep_payments_payment_id.e52171cf1d", "test.dbt_alfon_project.not_null_prep_payments_subscription_id.88a2675a4a", "test.dbt_alfon_project.not_null_prep_payments_user_id.82e14e667d", "test.dbt_alfon_project.relationships_prep_payments_subscription_id__subscription_id__ref_prep_subscriptions_.06f01fe8a8", "test.dbt_alfon_project.relationships_prep_payments_user_id__user_id__ref_prep_users_.fd9a6a8d64", "test.dbt_alfon_project.unique_prep_payments_payment_id.8ffa45bb00"], "model.dbt_alfon_project.prep_ratings": ["test.dbt_alfon_project.not_null_prep_ratings_movie_id.772360c57a", "test.dbt_alfon_project.not_null_prep_ratings_rating_id.1b400bed17", "test.dbt_alfon_project.not_null_prep_ratings_rating_score.3c16c53dbc", "test.dbt_alfon_project.not_null_prep_ratings_user_id.2a3a56f689", "test.dbt_alfon_project.relationships_prep_ratings_movie_id__movie_id__ref_prep_movies_.d303eeff80", "test.dbt_alfon_project.relationships_prep_ratings_user_id__user_id__ref_prep_users_.089315c550", "test.dbt_alfon_project.unique_prep_ratings_rating_id.fb718a0e4e"], "model.dbt_alfon_project.prep_subscriptions": ["test.dbt_alfon_project.not_null_prep_subscriptions_plan_type.d8cbbe6d07", "test.dbt_alfon_project.not_null_prep_subscriptions_subscription_id.f1941bc04a", "test.dbt_alfon_project.not_null_prep_subscriptions_user_id.1c94a7a0ad", "test.dbt_alfon_project.relationships_prep_payments_subscription_id__subscription_id__ref_prep_subscriptions_.06f01fe8a8", "test.dbt_alfon_project.relationships_prep_subscriptions_user_id__user_id__ref_prep_users_.c4fdfedeed", "test.dbt_alfon_project.unique_prep_subscriptions_subscription_id.c8f6d8f017"], "model.dbt_alfon_project.prep_users": ["test.dbt_alfon_project.not_null_prep_users_email.dbb5f01b82", "test.dbt_alfon_project.not_null_prep_users_subscription_status.49076219ce", "test.dbt_alfon_project.not_null_prep_users_user_id.394b415ec0", "test.dbt_alfon_project.relationships_prep_payments_user_id__user_id__ref_prep_users_.fd9a6a8d64", "test.dbt_alfon_project.relationships_prep_ratings_user_id__user_id__ref_prep_users_.089315c550", "test.dbt_alfon_project.relationships_prep_subscriptions_user_id__user_id__ref_prep_users_.c4fdfedeed", "test.dbt_alfon_project.relationships_prep_watch_sessions_user_id__user_id__ref_prep_users_.23bf59c700", "test.dbt_alfon_project.unique_prep_users_email.1ebd82e0c9", "test.dbt_alfon_project.unique_prep_users_user_id.4cbed66b4e"], "model.dbt_alfon_project.prep_watch_sessions": ["test.dbt_alfon_project.not_null_prep_watch_sessions_movie_id.c5f80e8d74", "test.dbt_alfon_project.not_null_prep_watch_sessions_session_id.2e025165de", "test.dbt_alfon_project.not_null_prep_watch_sessions_start_time.19953e8d75", "test.dbt_alfon_project.not_null_prep_watch_sessions_user_id.f64799a3f5", "test.dbt_alfon_project.relationships_prep_watch_sessions_movie_id__movie_id__ref_prep_movies_.52724b0e15", "test.dbt_alfon_project.relationships_prep_watch_sessions_user_id__user_id__ref_prep_users_.23bf59c700", "test.dbt_alfon_project.unique_prep_watch_sessions_session_id.77d2d56102"], "model.dbt_alfon_project.mart_taxi_trip_holiday_daily": ["model.dbt_alfon_project.mart_taxi_trip_holiday_summary", "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_total_trip.f2c6f6a9bc", "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_trip_date.d59f88293c", "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_trip_hour.c7a1ff4da5", "test.dbt_alfon_project.unique_mart_taxi_trip_holiday_daily_trip_date.9b02defbfd"], "model.dbt_alfon_project.mart_taxi_trip_holiday_summary": ["test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_holiday_type.88585f8788", "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_month.ff1cd255d5", "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_total_trip.0e898d6a86", "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_year.8af30500ef"], "model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow": ["model.dbt_alfon_project.mart_taxi_trip_holiday_daily", "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_dropoff_zone.f63b581450", "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_pickup_zone.54940d4fb6", "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_total_trip.6f512bc8fc", "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_trip_date.1f95191e59", "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_trip_hour.4801931c12"], "model.dbt_alfon_project.dim_holiday": ["model.dbt_alfon_project.mart_taxi_trip_holiday_summary", "model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow", "test.dbt_alfon_project.not_null_dim_holiday_date.1278ae4009", "test.dbt_alfon_project.not_null_dim_holiday_holiday_hour.8ab91b0b78", "test.dbt_alfon_project.not_null_dim_holiday_holiday_type.99f1309194", "test.dbt_alfon_project.not_null_dim_holiday_hour.cbab79b5e8", "test.dbt_alfon_project.unique_dim_holiday_holiday_hour.4d72c3e362"], "model.dbt_alfon_project.dim_location": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow", "test.dbt_alfon_project.not_null_dim_location_locationid.3f26f68eea", "test.dbt_alfon_project.relationships_fact_taxi_trip_dolocationid__locationid__ref_dim_location_.bc8d056cb2", "test.dbt_alfon_project.relationships_fact_taxi_trip_pulocationid__locationid__ref_dim_location_.d45166ecc2", "test.dbt_alfon_project.unique_dim_location_locationid.2cf6ff6ca8"], "model.dbt_alfon_project.dim_payment_type": ["test.dbt_alfon_project.not_null_dim_payment_type_payment_type.fc8226f626", "test.dbt_alfon_project.relationships_fact_taxi_trip_payment_type__payment_type__ref_dim_payment_type_.cfaca12491", "test.dbt_alfon_project.unique_dim_payment_type_payment_type.6b71c22d58"], "model.dbt_alfon_project.fact_taxi_trip": ["model.dbt_alfon_project.mart_taxi_trip_holiday_zone_flow", "test.dbt_alfon_project.not_null_fact_taxi_trip_dolocationid.50580ab298", "test.dbt_alfon_project.not_null_fact_taxi_trip_md5_key.4302dd62c5", "test.dbt_alfon_project.not_null_fact_taxi_trip_pickup_datetime.0e4bc79f52", "test.dbt_alfon_project.not_null_fact_taxi_trip_pulocationid.062022cf40", "test.dbt_alfon_project.not_null_fact_taxi_trip_taxi_type.ca416114dc", "test.dbt_alfon_project.relationships_fact_taxi_trip_dolocationid__locationid__ref_dim_location_.bc8d056cb2", "test.dbt_alfon_project.relationships_fact_taxi_trip_payment_type__payment_type__ref_dim_payment_type_.cfaca12491", "test.dbt_alfon_project.relationships_fact_taxi_trip_pulocationid__locationid__ref_dim_location_.d45166ecc2", "test.dbt_alfon_project.unique_fact_taxi_trip_md5_key.89fafee60c"], "model.dbt_alfon_project.prep_taxi_trip": ["model.dbt_alfon_project.fact_taxi_trip", "test.dbt_alfon_project.not_null_prep_taxi_trip_dolocationid.afabc95e1d", "test.dbt_alfon_project.not_null_prep_taxi_trip_dropoff_datetime.ce5b9109bd", "test.dbt_alfon_project.not_null_prep_taxi_trip_md5_key.795652e05c", "test.dbt_alfon_project.not_null_prep_taxi_trip_pickup_datetime.6d64cd99ed", "test.dbt_alfon_project.not_null_prep_taxi_trip_pulocationid.7890f905c9", "test.dbt_alfon_project.unique_prep_taxi_trip_md5_key.581a440d29"], "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_movie_id.15eb004770": [], "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_month_key.47e509fbde": [], "test.dbt_alfon_project.not_null_mart_movie_popularity_monthly_movie_month_key.1a00591e3d": [], "test.dbt_alfon_project.unique_mart_movie_popularity_monthly_movie_month_key.6ae24ba573": [], "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_movie_id.e86c6ea5e8": [], "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_month_key.6110cdcd83": [], "test.dbt_alfon_project.not_null_mart_movie_rating_monthly_movie_month_key.c090141aef": [], "test.dbt_alfon_project.unique_mart_movie_rating_monthly_movie_month_key.546b490e5a": [], "test.dbt_alfon_project.not_null_mart_user_activity_monthly_user_id.af27035a1c": [], "test.dbt_alfon_project.not_null_mart_user_activity_monthly_month_key.0dd3c3f659": [], "test.dbt_alfon_project.not_null_mart_user_activity_monthly_user_month_key.f7e031972b": [], "test.dbt_alfon_project.unique_mart_user_activity_monthly_user_month_key.38a5e52f95": [], "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_subscription_id.42831f320a": [], "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_month_key.3fe417258d": [], "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_subscription_month_key.c7de84fded": [], "test.dbt_alfon_project.unique_mart_subscription_revenue_monthly_subscription_month_key.2aabea2a29": [], "test.dbt_alfon_project.not_null_mart_subscription_revenue_monthly_run_date_bq.814b57db4b": [], "test.dbt_alfon_project.not_null_dim_users_user_id.e754bb5812": [], "test.dbt_alfon_project.unique_dim_users_user_id.bcdc17b9f9": [], "test.dbt_alfon_project.not_null_dim_users_name.ff1cc66807": [], "test.dbt_alfon_project.not_null_dim_users_email.f41c7984c2": [], "test.dbt_alfon_project.unique_dim_users_email.53417c09f1": [], "test.dbt_alfon_project.not_null_dim_users_country.b6217b23ba": [], "test.dbt_alfon_project.not_null_dim_users_join_date.635d96312d": [], "test.dbt_alfon_project.not_null_dim_subscriptions_subscription_id.593212df68": [], "test.dbt_alfon_project.unique_dim_subscriptions_subscription_id.aab39a989d": [], "test.dbt_alfon_project.not_null_dim_subscriptions_plan_type.ebd4738bae": [], "test.dbt_alfon_project.not_null_dim_subscriptions_start_date.b35dad5f3d": [], "test.dbt_alfon_project.not_null_dim_subscriptions_status.64f3eb029e": [], "test.dbt_alfon_project.not_null_dim_movies_movie_id.0f96ca970d": [], "test.dbt_alfon_project.unique_dim_movies_movie_id.2e7fb7860b": [], "test.dbt_alfon_project.not_null_dim_movies_title.e533d1bb2e": [], "test.dbt_alfon_project.not_null_dim_movies_release_year.5f626c052f": [], "test.dbt_alfon_project.not_null_dim_date_date_key.881d0a31b6": [], "test.dbt_alfon_project.unique_dim_date_date_key.0869fd48f9": [], "test.dbt_alfon_project.not_null_fact_user_activity_session_id.b1160c4b06": [], "test.dbt_alfon_project.unique_fact_user_activity_session_id.83dce4702f": [], "test.dbt_alfon_project.not_null_fact_user_activity_user_id.56fb1f5764": [], "test.dbt_alfon_project.not_null_fact_user_activity_movie_id.dd47e41574": [], "test.dbt_alfon_project.not_null_fact_user_activity_date_key.4e48acbcb7": [], "test.dbt_alfon_project.not_null_fact_movie_popularity_movie_id.6fb4c744de": [], "test.dbt_alfon_project.not_null_fact_movie_popularity_date_key.e56d81d195": [], "test.dbt_alfon_project.not_null_fact_payments_payment_id.707bc26eed": [], "test.dbt_alfon_project.unique_fact_payments_payment_id.33c1a8aa61": [], "test.dbt_alfon_project.not_null_fact_payments_user_id.f037c5beee": [], "test.dbt_alfon_project.not_null_fact_payments_subscription_id.636fea44b7": [], "test.dbt_alfon_project.not_null_fact_payments_amount.b933a677cd": [], "test.dbt_alfon_project.not_null_fact_payments_payment_date.69c67555cf": [], "test.dbt_alfon_project.not_null_fact_payments_date_key.32d2235fbf": [], "test.dbt_alfon_project.not_null_fact_ratings_rating_id.2286a71e17": [], "test.dbt_alfon_project.unique_fact_ratings_rating_id.6cc98351c6": [], "test.dbt_alfon_project.not_null_fact_ratings_user_id.7ba42cc51a": [], "test.dbt_alfon_project.not_null_fact_ratings_movie_id.f5c9a51642": [], "test.dbt_alfon_project.not_null_fact_ratings_rating_score.61d633ca4e": [], "test.dbt_alfon_project.not_null_fact_ratings_rating_date.c464b78e56": [], "test.dbt_alfon_project.not_null_fact_ratings_date_key.e5e0a8de5e": [], "test.dbt_alfon_project.unique_prep_users_user_id.4cbed66b4e": [], "test.dbt_alfon_project.not_null_prep_users_user_id.394b415ec0": [], "test.dbt_alfon_project.unique_prep_users_email.1ebd82e0c9": [], "test.dbt_alfon_project.not_null_prep_users_email.dbb5f01b82": [], "test.dbt_alfon_project.not_null_prep_users_subscription_status.49076219ce": [], "test.dbt_alfon_project.unique_prep_subscriptions_subscription_id.c8f6d8f017": [], "test.dbt_alfon_project.not_null_prep_subscriptions_subscription_id.f1941bc04a": [], "test.dbt_alfon_project.not_null_prep_subscriptions_user_id.1c94a7a0ad": [], "test.dbt_alfon_project.relationships_prep_subscriptions_user_id__user_id__ref_prep_users_.c4fdfedeed": [], "test.dbt_alfon_project.not_null_prep_subscriptions_plan_type.d8cbbe6d07": [], "test.dbt_alfon_project.unique_prep_movies_movie_id.ef76cf94c6": [], "test.dbt_alfon_project.not_null_prep_movies_movie_id.5581c34a61": [], "test.dbt_alfon_project.not_null_prep_movies_title.83e850ae04": [], "test.dbt_alfon_project.not_null_prep_movies_release_year.a919e5f2be": [], "test.dbt_alfon_project.unique_prep_watch_sessions_session_id.77d2d56102": [], "test.dbt_alfon_project.not_null_prep_watch_sessions_session_id.2e025165de": [], "test.dbt_alfon_project.not_null_prep_watch_sessions_user_id.f64799a3f5": [], "test.dbt_alfon_project.relationships_prep_watch_sessions_user_id__user_id__ref_prep_users_.23bf59c700": [], "test.dbt_alfon_project.not_null_prep_watch_sessions_movie_id.c5f80e8d74": [], "test.dbt_alfon_project.relationships_prep_watch_sessions_movie_id__movie_id__ref_prep_movies_.52724b0e15": [], "test.dbt_alfon_project.not_null_prep_watch_sessions_start_time.19953e8d75": [], "test.dbt_alfon_project.unique_prep_payments_payment_id.8ffa45bb00": [], "test.dbt_alfon_project.not_null_prep_payments_payment_id.e52171cf1d": [], "test.dbt_alfon_project.not_null_prep_payments_user_id.82e14e667d": [], "test.dbt_alfon_project.relationships_prep_payments_user_id__user_id__ref_prep_users_.fd9a6a8d64": [], "test.dbt_alfon_project.not_null_prep_payments_subscription_id.88a2675a4a": [], "test.dbt_alfon_project.relationships_prep_payments_subscription_id__subscription_id__ref_prep_subscriptions_.06f01fe8a8": [], "test.dbt_alfon_project.not_null_prep_payments_amount.47537c1e3e": [], "test.dbt_alfon_project.unique_prep_ratings_rating_id.fb718a0e4e": [], "test.dbt_alfon_project.not_null_prep_ratings_rating_id.1b400bed17": [], "test.dbt_alfon_project.not_null_prep_ratings_user_id.2a3a56f689": [], "test.dbt_alfon_project.relationships_prep_ratings_user_id__user_id__ref_prep_users_.089315c550": [], "test.dbt_alfon_project.not_null_prep_ratings_movie_id.772360c57a": [], "test.dbt_alfon_project.relationships_prep_ratings_movie_id__movie_id__ref_prep_movies_.d303eeff80": [], "test.dbt_alfon_project.not_null_prep_ratings_rating_score.3c16c53dbc": [], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_trip_date.1f95191e59": [], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_trip_hour.4801931c12": [], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_pickup_zone.54940d4fb6": [], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_dropoff_zone.f63b581450": [], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_zone_flow_total_trip.6f512bc8fc": [], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_trip_hour.c7a1ff4da5": [], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_trip_date.d59f88293c": [], "test.dbt_alfon_project.unique_mart_taxi_trip_holiday_daily_trip_date.9b02defbfd": [], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_daily_total_trip.f2c6f6a9bc": [], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_year.8af30500ef": [], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_month.ff1cd255d5": [], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_holiday_type.88585f8788": [], "test.dbt_alfon_project.not_null_mart_taxi_trip_holiday_summary_total_trip.0e898d6a86": [], "test.dbt_alfon_project.not_null_fact_taxi_trip_md5_key.4302dd62c5": [], "test.dbt_alfon_project.unique_fact_taxi_trip_md5_key.89fafee60c": [], "test.dbt_alfon_project.not_null_fact_taxi_trip_taxi_type.ca416114dc": [], "test.dbt_alfon_project.not_null_fact_taxi_trip_pickup_datetime.0e4bc79f52": [], "test.dbt_alfon_project.not_null_fact_taxi_trip_pulocationid.062022cf40": [], "test.dbt_alfon_project.relationships_fact_taxi_trip_pulocationid__locationid__ref_dim_location_.d45166ecc2": [], "test.dbt_alfon_project.not_null_fact_taxi_trip_dolocationid.50580ab298": [], "test.dbt_alfon_project.relationships_fact_taxi_trip_dolocationid__locationid__ref_dim_location_.bc8d056cb2": [], "test.dbt_alfon_project.relationships_fact_taxi_trip_payment_type__payment_type__ref_dim_payment_type_.cfaca12491": [], "test.dbt_alfon_project.not_null_dim_payment_type_payment_type.fc8226f626": [], "test.dbt_alfon_project.unique_dim_payment_type_payment_type.6b71c22d58": [], "test.dbt_alfon_project.not_null_dim_location_locationid.3f26f68eea": [], "test.dbt_alfon_project.unique_dim_location_locationid.2cf6ff6ca8": [], "test.dbt_alfon_project.not_null_dim_holiday_date.1278ae4009": [], "test.dbt_alfon_project.not_null_dim_holiday_holiday_type.99f1309194": [], "test.dbt_alfon_project.not_null_dim_holiday_hour.cbab79b5e8": [], "test.dbt_alfon_project.not_null_dim_holiday_holiday_hour.8ab91b0b78": [], "test.dbt_alfon_project.unique_dim_holiday_holiday_hour.4d72c3e362": [], "test.dbt_alfon_project.not_null_prep_taxi_trip_md5_key.795652e05c": [], "test.dbt_alfon_project.unique_prep_taxi_trip_md5_key.581a440d29": [], "test.dbt_alfon_project.not_null_prep_taxi_trip_pickup_datetime.6d64cd99ed": [], "test.dbt_alfon_project.not_null_prep_taxi_trip_dropoff_datetime.ce5b9109bd": [], "test.dbt_alfon_project.not_null_prep_taxi_trip_pulocationid.7890f905c9": [], "test.dbt_alfon_project.not_null_prep_taxi_trip_dolocationid.afabc95e1d": [], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_payments": ["model.dbt_alfon_project.mart_subscription_revenue_monthly"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_ratings": ["model.dbt_alfon_project.mart_movie_rating_monthly"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_movie_popularity": ["model.dbt_alfon_project.mart_movie_popularity_monthly"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_model.fact_user_activity": ["model.dbt_alfon_project.mart_user_activity_monthly"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_users": ["model.dbt_alfon_project.dim_users"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_subscriptions": ["model.dbt_alfon_project.dim_subscriptions", "model.dbt_alfon_project.dim_users"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_movies": ["model.dbt_alfon_project.dim_movies"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_watch_sessions": ["model.dbt_alfon_project.fact_user_activity"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_payments": ["model.dbt_alfon_project.fact_payments"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_preparation.prep_ratings": ["model.dbt_alfon_project.fact_ratings"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_users": ["model.dbt_alfon_project.prep_users"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_subscriptions": ["model.dbt_alfon_project.prep_subscriptions"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_movies": ["model.dbt_alfon_project.prep_movies"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_watch_sessions": ["model.dbt_alfon_project.prep_watch_sessions"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_payments": ["model.dbt_alfon_project.prep_payments"], "source.dbt_alfon_project.jcdeol004_alfon_movie_streaming_raw.raw_ratings": ["model.dbt_alfon_project.prep_ratings"], "source.dbt_alfon_project.taxi_zone.raw_taxi_zone": ["model.dbt_alfon_project.dim_location"], "source.dbt_alfon_project.taxi_trip_raw.raw_yellow_taxi_trip": ["model.dbt_alfon_project.prep_taxi_trip"], "source.dbt_alfon_project.taxi_trip_raw.raw_green_taxi_trip": ["model.dbt_alfon_project.prep_taxi_trip"]}, "group_map": {}, "semantic_models": {}}